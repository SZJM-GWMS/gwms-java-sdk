/*
 * GWMS Public API
 * GWMS（仓库管理系统）的官方公开API。 它为ERP、电子商务平台和TMS等外部系统提供了一个标准化、健壮且易于集成的接口，以便与WMS功能进行交互。  ## 认证机制  本API采用基于JWT的Bearer令牌认证，结合三重凭证验证机制：  1. **客户端凭证（Client Credentials）**：由系统管理员为上游系统生成的clientId和clientSecret 2. **API密钥（API Key）**：由仓库用户生成，关联到特定仓库和权限范围 3. **访问令牌（Access Token）**：通过认证端点获取的JWT令牌，用于API访问  ## 快速开始  1. **获取凭证**：联系系统管理员获取clientId和clientSecret，联系仓库用户获取apiKey 2. **获取令牌**：调用 `POST /auth-api/token` 端点获取访问令牌 3. **调用API**：在请求头中添加 `Authorization: Bearer {access_token}` 调用其他API  ## 认证头部格式  所有API请求（除了认证端点）必须包含以下HTTP头部：  ``` Authorization: Bearer {access_token} ```  其中`{access_token}`是从认证端点获取的JWT令牌。缺少此头部或令牌无效将导致401错误。  ## 权限范围  API访问权限基于以下范围进行控制：  | 权限范围 | 描述 | 适用API | 示例操作 | |---------|------|---------|---------| | `product:read` | 产品数据读取权限 | `/api/v1/products/_*` | 查询产品列表、获取产品详情 | | `product:write` | 产品数据写入权限 | `/api/v1/products/_*` | 创建产品、更新产品信息 | | `warehouse:read` | 仓库数据读取权限 | `/api/v1/warehouses/_*` | 查询仓库列表、获取仓库详情 | | `warehouse:write` | 仓库数据写入权限 | `/api/v1/warehouses/_*` | 创建仓库、更新仓库信息 | | `stock:read` | 库存数据读取权限 | `/api/v1/stock/_*` | 查询库存数量、库存明细 | | `stock:write` | 库存数据写入权限 | `/api/v1/stock/_*` | 库存调整、库存转移 | | `inbound:read` | 入库单读取权限 | `/api/v1/inbound/_*` | 查询入库单列表、获取入库单详情 | | `inbound:write` | 入库单写入权限 | `/api/v1/inbound/_*` | 创建入库单、更新入库单 | | `outbound:read` | 出库单读取权限 | `/api/v1/outbound/_*` | 查询出库单列表、获取出库单详情 | | `outbound:write` | 出库单写入权限 | `/api/v1/outbound/_*` | 创建出库单、更新出库单 | | `express:read` | 物流渠道读取权限 | `/api/v1/expressChannel/_*` | 查询物流渠道列表 | | `express:write` | 物流渠道写入权限 | `/api/v1/expressChannel/_*` | 创建物流渠道、更新物流渠道 |  ## 错误响应  认证失败时，API将返回以下错误响应：  - **401 Unauthorized**：令牌无效、过期或缺失 - **403 Forbidden**：令牌有效但权限不足 - **429 Too Many Requests**：超过访问频率限制  详细的错误响应格式请参考错误响应部分。 
 *
 * The version of the OpenAPI document: 1.0.3
 * Contact: api-support@jmalltech.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.jmalltech.gwms.sdk.api;

import com.jmalltech.gwms.sdk.invoker.ApiCallback;
import com.jmalltech.gwms.sdk.invoker.ApiClient;
import com.jmalltech.gwms.sdk.invoker.ApiException;
import com.jmalltech.gwms.sdk.invoker.ApiResponse;
import com.jmalltech.gwms.sdk.invoker.Configuration;
import com.jmalltech.gwms.sdk.invoker.Pair;
import com.jmalltech.gwms.sdk.invoker.ProgressRequestBody;
import com.jmalltech.gwms.sdk.invoker.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;

import javax.validation.constraints.*;
import javax.validation.Valid;

import com.jmalltech.gwms.sdk.model.ApiErrorResponse;
import com.jmalltech.gwms.sdk.model.TokenRequest;
import com.jmalltech.gwms.sdk.model.TokenResponse;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class AuthApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public AuthApi() {
        this(Configuration.getDefaultApiClient());
    }

    public AuthApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for getAccessToken
     * @param tokenRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 认证成功，返回访问令牌 </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> 请求参数错误 </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> 认证失败 </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> 请求频率超限 </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> 内部服务器错误。服务器遇到了不知道如何处理的情况。 </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAccessTokenCall(TokenRequest tokenRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = tokenRequest;

        // create path and map variables
        String localVarPath = "/auth-api/token";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getAccessTokenValidateBeforeCall(TokenRequest tokenRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'tokenRequest' is set
        if (tokenRequest == null) {
            throw new ApiException("Missing the required parameter 'tokenRequest' when calling getAccessToken(Async)");
        }

        return getAccessTokenCall(tokenRequest, _callback);

    }

    /**
     * 获取访问令牌
     * 使用客户端凭证（clientId + clientSecret）和API密钥获取JWT访问令牌。  ## 认证流程详解  ### 1. 准备阶段 - **系统管理员**：为上游系统生成clientId和clientSecret - **仓库用户**：生成apiKey，关联到特定仓库和权限范围 - **上游系统**：获取并安全存储这三个凭证  ### 2. 令牌获取 &#x60;&#x60;&#x60;bash curl -X POST https://gwms.jmalltech.com/api-gateway/auth-api/token \\   -H \&quot;Content-Type: application/json\&quot; \\   -d &#39;{     \&quot;clientId\&quot;: \&quot;EOUSSQNWMRVX15GA\&quot;,     \&quot;clientSecret\&quot;: \&quot;tiy3dbyW8l5W06sFQwsjOIU8-xTLbRJJVtxreGlka8Y&#x3D;\&quot;,     \&quot;apiKey\&quot;: \&quot;8MO5994KEQMEZMAN\&quot;   }&#39; &#x60;&#x60;&#x60;  ### 3. API访问 &#x60;&#x60;&#x60;bash curl -H \&quot;Authorization: Bearer {access_token}\&quot; \\   https://gwms.jmalltech.com/api/v1/products &#x60;&#x60;&#x60;  ## 安全最佳实践  - **clientSecret安全**：只在生成时显示一次，请妥善保存在安全的配置管理系统中 - **令牌管理**：访问令牌有效期为1小时，建议在过期前5分钟重新获取 - **权限最小化**：apiKey应只包含业务所需的最小权限范围 - **网络安全**：生产环境必须使用HTTPS传输 - **日志安全**：不要在日志中记录完整的凭证信息  ## 错误处理  - **400 Bad Request**：请求参数缺失或格式错误 - **401 Unauthorized**：凭证无效、过期或被禁用 - **429 Too Many Requests**：请求频率超出限制 - **500 Internal Server Error**：服务器内部错误  ## 权限范围说明  令牌的权限范围由apiKey关联的仓库用户权限决定：  | 权限范围 | 说明 | 示例操作 | |---------|------|---------| | &#x60;product:read&#x60; | 产品数据读取 | 查询产品列表、获取产品详情 | | &#x60;product:write&#x60; | 产品数据写入 | 创建、更新、删除产品 | | &#x60;warehouse:read&#x60; | 仓库数据读取 | 查询仓库、库区、库位信息 | | &#x60;warehouse:write&#x60; | 仓库数据写入 | 创建、更新仓库配置 | | &#x60;stock:read&#x60; | 库存数据读取 | 查询库存数量、库存明细 | | &#x60;stock:write&#x60; | 库存数据写入 | 库存调整、库存转移 | | &#x60;inbound:read&#x60; | 入库单读取 | 查询入库单列表、获取入库单详情 | | &#x60;inbound:write&#x60; | 入库单写入 | 创建、更新、取消入库单 | | &#x60;outbound:read&#x60; | 出库单读取 | 查询出库单列表、获取出库单详情 | | &#x60;outbound:write&#x60; | 出库单写入 | 创建、更新、取消出库单 | 
     * @param tokenRequest  (required)
     * @return TokenResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 认证成功，返回访问令牌 </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> 请求参数错误 </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> 认证失败 </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> 请求频率超限 </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> 内部服务器错误。服务器遇到了不知道如何处理的情况。 </td><td>  -  </td></tr>
     </table>
     */
    public TokenResponse getAccessToken(TokenRequest tokenRequest) throws ApiException {
        ApiResponse<TokenResponse> localVarResp = getAccessTokenWithHttpInfo(tokenRequest);
        return localVarResp.getData();
    }

    /**
     * 获取访问令牌
     * 使用客户端凭证（clientId + clientSecret）和API密钥获取JWT访问令牌。  ## 认证流程详解  ### 1. 准备阶段 - **系统管理员**：为上游系统生成clientId和clientSecret - **仓库用户**：生成apiKey，关联到特定仓库和权限范围 - **上游系统**：获取并安全存储这三个凭证  ### 2. 令牌获取 &#x60;&#x60;&#x60;bash curl -X POST https://gwms.jmalltech.com/api-gateway/auth-api/token \\   -H \&quot;Content-Type: application/json\&quot; \\   -d &#39;{     \&quot;clientId\&quot;: \&quot;EOUSSQNWMRVX15GA\&quot;,     \&quot;clientSecret\&quot;: \&quot;tiy3dbyW8l5W06sFQwsjOIU8-xTLbRJJVtxreGlka8Y&#x3D;\&quot;,     \&quot;apiKey\&quot;: \&quot;8MO5994KEQMEZMAN\&quot;   }&#39; &#x60;&#x60;&#x60;  ### 3. API访问 &#x60;&#x60;&#x60;bash curl -H \&quot;Authorization: Bearer {access_token}\&quot; \\   https://gwms.jmalltech.com/api/v1/products &#x60;&#x60;&#x60;  ## 安全最佳实践  - **clientSecret安全**：只在生成时显示一次，请妥善保存在安全的配置管理系统中 - **令牌管理**：访问令牌有效期为1小时，建议在过期前5分钟重新获取 - **权限最小化**：apiKey应只包含业务所需的最小权限范围 - **网络安全**：生产环境必须使用HTTPS传输 - **日志安全**：不要在日志中记录完整的凭证信息  ## 错误处理  - **400 Bad Request**：请求参数缺失或格式错误 - **401 Unauthorized**：凭证无效、过期或被禁用 - **429 Too Many Requests**：请求频率超出限制 - **500 Internal Server Error**：服务器内部错误  ## 权限范围说明  令牌的权限范围由apiKey关联的仓库用户权限决定：  | 权限范围 | 说明 | 示例操作 | |---------|------|---------| | &#x60;product:read&#x60; | 产品数据读取 | 查询产品列表、获取产品详情 | | &#x60;product:write&#x60; | 产品数据写入 | 创建、更新、删除产品 | | &#x60;warehouse:read&#x60; | 仓库数据读取 | 查询仓库、库区、库位信息 | | &#x60;warehouse:write&#x60; | 仓库数据写入 | 创建、更新仓库配置 | | &#x60;stock:read&#x60; | 库存数据读取 | 查询库存数量、库存明细 | | &#x60;stock:write&#x60; | 库存数据写入 | 库存调整、库存转移 | | &#x60;inbound:read&#x60; | 入库单读取 | 查询入库单列表、获取入库单详情 | | &#x60;inbound:write&#x60; | 入库单写入 | 创建、更新、取消入库单 | | &#x60;outbound:read&#x60; | 出库单读取 | 查询出库单列表、获取出库单详情 | | &#x60;outbound:write&#x60; | 出库单写入 | 创建、更新、取消出库单 | 
     * @param tokenRequest  (required)
     * @return ApiResponse&lt;TokenResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 认证成功，返回访问令牌 </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> 请求参数错误 </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> 认证失败 </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> 请求频率超限 </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> 内部服务器错误。服务器遇到了不知道如何处理的情况。 </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<TokenResponse> getAccessTokenWithHttpInfo( @NotNull TokenRequest tokenRequest) throws ApiException {
        okhttp3.Call localVarCall = getAccessTokenValidateBeforeCall(tokenRequest, null);
        Type localVarReturnType = new TypeToken<TokenResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * 获取访问令牌 (asynchronously)
     * 使用客户端凭证（clientId + clientSecret）和API密钥获取JWT访问令牌。  ## 认证流程详解  ### 1. 准备阶段 - **系统管理员**：为上游系统生成clientId和clientSecret - **仓库用户**：生成apiKey，关联到特定仓库和权限范围 - **上游系统**：获取并安全存储这三个凭证  ### 2. 令牌获取 &#x60;&#x60;&#x60;bash curl -X POST https://gwms.jmalltech.com/api-gateway/auth-api/token \\   -H \&quot;Content-Type: application/json\&quot; \\   -d &#39;{     \&quot;clientId\&quot;: \&quot;EOUSSQNWMRVX15GA\&quot;,     \&quot;clientSecret\&quot;: \&quot;tiy3dbyW8l5W06sFQwsjOIU8-xTLbRJJVtxreGlka8Y&#x3D;\&quot;,     \&quot;apiKey\&quot;: \&quot;8MO5994KEQMEZMAN\&quot;   }&#39; &#x60;&#x60;&#x60;  ### 3. API访问 &#x60;&#x60;&#x60;bash curl -H \&quot;Authorization: Bearer {access_token}\&quot; \\   https://gwms.jmalltech.com/api/v1/products &#x60;&#x60;&#x60;  ## 安全最佳实践  - **clientSecret安全**：只在生成时显示一次，请妥善保存在安全的配置管理系统中 - **令牌管理**：访问令牌有效期为1小时，建议在过期前5分钟重新获取 - **权限最小化**：apiKey应只包含业务所需的最小权限范围 - **网络安全**：生产环境必须使用HTTPS传输 - **日志安全**：不要在日志中记录完整的凭证信息  ## 错误处理  - **400 Bad Request**：请求参数缺失或格式错误 - **401 Unauthorized**：凭证无效、过期或被禁用 - **429 Too Many Requests**：请求频率超出限制 - **500 Internal Server Error**：服务器内部错误  ## 权限范围说明  令牌的权限范围由apiKey关联的仓库用户权限决定：  | 权限范围 | 说明 | 示例操作 | |---------|------|---------| | &#x60;product:read&#x60; | 产品数据读取 | 查询产品列表、获取产品详情 | | &#x60;product:write&#x60; | 产品数据写入 | 创建、更新、删除产品 | | &#x60;warehouse:read&#x60; | 仓库数据读取 | 查询仓库、库区、库位信息 | | &#x60;warehouse:write&#x60; | 仓库数据写入 | 创建、更新仓库配置 | | &#x60;stock:read&#x60; | 库存数据读取 | 查询库存数量、库存明细 | | &#x60;stock:write&#x60; | 库存数据写入 | 库存调整、库存转移 | | &#x60;inbound:read&#x60; | 入库单读取 | 查询入库单列表、获取入库单详情 | | &#x60;inbound:write&#x60; | 入库单写入 | 创建、更新、取消入库单 | | &#x60;outbound:read&#x60; | 出库单读取 | 查询出库单列表、获取出库单详情 | | &#x60;outbound:write&#x60; | 出库单写入 | 创建、更新、取消出库单 | 
     * @param tokenRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 认证成功，返回访问令牌 </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> 请求参数错误 </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> 认证失败 </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> 请求频率超限 </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> 内部服务器错误。服务器遇到了不知道如何处理的情况。 </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAccessTokenAsync(TokenRequest tokenRequest, final ApiCallback<TokenResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getAccessTokenValidateBeforeCall(tokenRequest, _callback);
        Type localVarReturnType = new TypeToken<TokenResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
