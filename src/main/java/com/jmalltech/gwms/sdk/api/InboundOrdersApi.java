/*
 * GWMS Public API
 * GWMS（仓库管理系统）的官方公开API。 它为ERP、电子商务平台和TMS等外部系统提供了一个标准化、健壮且易于集成的接口，以便与WMS功能进行交互。  ## 认证机制  本API采用基于JWT的Bearer令牌认证，结合三重凭证验证机制：  1. **客户端凭证（Client Credentials）**：由系统管理员为上游系统生成的clientId和clientSecret 2. **API密钥（API Key）**：由仓库用户生成，关联到特定仓库和权限范围 3. **访问令牌（Access Token）**：通过认证端点获取的JWT令牌，用于API访问  ## 快速开始  1. **获取凭证**：联系系统管理员获取clientId和clientSecret，联系仓库用户获取apiKey 2. **获取令牌**：调用 `POST /auth-api/token` 端点获取访问令牌 3. **调用API**：在请求头中添加 `Authorization: Bearer {access_token}` 调用其他API  ## 认证头部格式  所有API请求（除了认证端点）必须包含以下HTTP头部：  ``` Authorization: Bearer {access_token} ```  其中`{access_token}`是从认证端点获取的JWT令牌。缺少此头部或令牌无效将导致401错误。  ## 权限范围  API访问权限基于以下范围进行控制：  | 权限范围 | 描述 | 适用API | 示例操作 | |---------|------|---------|---------| | `product:read` | 产品数据读取权限 | `/api/v1/products/_*` | 查询产品列表、获取产品详情 | | `product:write` | 产品数据写入权限 | `/api/v1/products/_*` | 创建产品、更新产品信息 | | `warehouse:read` | 仓库数据读取权限 | `/api/v1/warehouses/_*` | 查询仓库列表、获取仓库详情 | | `warehouse:write` | 仓库数据写入权限 | `/api/v1/warehouses/_*` | 创建仓库、更新仓库信息 | | `stock:read` | 库存数据读取权限 | `/api/v1/stock/_*` | 查询库存数量、库存明细 | | `stock:write` | 库存数据写入权限 | `/api/v1/stock/_*` | 库存调整、库存转移 | | `inbound:read` | 入库单读取权限 | `/api/v1/inbound/_*` | 查询入库单列表、获取入库单详情 | | `inbound:write` | 入库单写入权限 | `/api/v1/inbound/_*` | 创建入库单、更新入库单 | | `outbound:read` | 出库单读取权限 | `/api/v1/outbound/_*` | 查询出库单列表、获取出库单详情 | | `outbound:write` | 出库单写入权限 | `/api/v1/outbound/_*` | 创建出库单、更新出库单 | | `express:read` | 物流渠道读取权限 | `/api/v1/expressChannel/_*` | 查询物流渠道列表 | | `express:write` | 物流渠道写入权限 | `/api/v1/expressChannel/_*` | 创建物流渠道、更新物流渠道 |  ## 错误响应  认证失败时，API将返回以下错误响应：  - **401 Unauthorized**：令牌无效、过期或缺失 - **403 Forbidden**：令牌有效但权限不足 - **429 Too Many Requests**：超过访问频率限制  详细的错误响应格式请参考错误响应部分。 
 *
 * The version of the OpenAPI document: 1.0.3
 * Contact: api-support@jmalltech.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.jmalltech.gwms.sdk.api;

import com.jmalltech.gwms.sdk.invoker.ApiCallback;
import com.jmalltech.gwms.sdk.invoker.ApiClient;
import com.jmalltech.gwms.sdk.invoker.ApiException;
import com.jmalltech.gwms.sdk.invoker.ApiResponse;
import com.jmalltech.gwms.sdk.invoker.Configuration;
import com.jmalltech.gwms.sdk.invoker.Pair;
import com.jmalltech.gwms.sdk.invoker.ProgressRequestBody;
import com.jmalltech.gwms.sdk.invoker.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;

import javax.validation.constraints.*;
import javax.validation.Valid;

import com.jmalltech.gwms.sdk.model.ApiErrorResponse;
import com.jmalltech.gwms.sdk.model.InboundOrderCreateRequest;
import com.jmalltech.gwms.sdk.model.InboundOrderDetailResponse;
import com.jmalltech.gwms.sdk.model.InboundOrderListResponse;
import com.jmalltech.gwms.sdk.model.InboundOrderResponse;
import com.jmalltech.gwms.sdk.model.InboundOrderStatusEnum;
import com.jmalltech.gwms.sdk.model.InboundOrderStatusUpdateRequest;
import com.jmalltech.gwms.sdk.model.InboundOrderUpdateRequest;
import com.jmalltech.gwms.sdk.model.InboundTypeEnum;
import java.time.LocalDate;
import com.jmalltech.gwms.sdk.model.SortDirection;
import java.util.UUID;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class InboundOrdersApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public InboundOrdersApi() {
        this(Configuration.getDefaultApiClient());
    }

    public InboundOrdersApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for cancelInboundOrderByCode
     * @param inboundNo 入库单号。 (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> 入库单已成功取消。 </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> 未经授权。客户端必须对自己进行身份验证才能获得请求的响应。 </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> 未找到。服务器找不到请求的资源。 </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> 冲突。入库单无法取消，例如，状态不允许取消。 </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> 内部服务器错误。服务器遇到了不知道如何处理的情况。 </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call cancelInboundOrderByCodeCall(String inboundNo, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/inbound/orders/{inboundNo}"
            .replace("{" + "inboundNo" + "}", localVarApiClient.escapeString(inboundNo.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "BearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call cancelInboundOrderByCodeValidateBeforeCall(String inboundNo, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'inboundNo' is set
        if (inboundNo == null) {
            throw new ApiException("Missing the required parameter 'inboundNo' when calling cancelInboundOrderByCode(Async)");
        }

        return cancelInboundOrderByCodeCall(inboundNo, _callback);

    }

    /**
     * 通过入库单号取消入库单
     * 通过入库单号取消入库单。只有未收获的入库单才能被取消。  **所需权限：** &#x60;inbound:write&#x60;  **使用场景：** - ERP系统取消已下发的入库单 - 供应商取消预约入库 - 处理异常情况下的入库单撤销 
     * @param inboundNo 入库单号。 (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> 入库单已成功取消。 </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> 未经授权。客户端必须对自己进行身份验证才能获得请求的响应。 </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> 未找到。服务器找不到请求的资源。 </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> 冲突。入库单无法取消，例如，状态不允许取消。 </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> 内部服务器错误。服务器遇到了不知道如何处理的情况。 </td><td>  -  </td></tr>
     </table>
     */
    public void cancelInboundOrderByCode(String inboundNo) throws ApiException {
        cancelInboundOrderByCodeWithHttpInfo(inboundNo);
    }

    /**
     * 通过入库单号取消入库单
     * 通过入库单号取消入库单。只有未收获的入库单才能被取消。  **所需权限：** &#x60;inbound:write&#x60;  **使用场景：** - ERP系统取消已下发的入库单 - 供应商取消预约入库 - 处理异常情况下的入库单撤销 
     * @param inboundNo 入库单号。 (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> 入库单已成功取消。 </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> 未经授权。客户端必须对自己进行身份验证才能获得请求的响应。 </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> 未找到。服务器找不到请求的资源。 </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> 冲突。入库单无法取消，例如，状态不允许取消。 </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> 内部服务器错误。服务器遇到了不知道如何处理的情况。 </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> cancelInboundOrderByCodeWithHttpInfo( @NotNull  @Pattern(regexp="^[A-Za-z0-9-]{1,50}$")String inboundNo) throws ApiException {
        okhttp3.Call localVarCall = cancelInboundOrderByCodeValidateBeforeCall(inboundNo, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * 通过入库单号取消入库单 (asynchronously)
     * 通过入库单号取消入库单。只有未收获的入库单才能被取消。  **所需权限：** &#x60;inbound:write&#x60;  **使用场景：** - ERP系统取消已下发的入库单 - 供应商取消预约入库 - 处理异常情况下的入库单撤销 
     * @param inboundNo 入库单号。 (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> 入库单已成功取消。 </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> 未经授权。客户端必须对自己进行身份验证才能获得请求的响应。 </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> 未找到。服务器找不到请求的资源。 </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> 冲突。入库单无法取消，例如，状态不允许取消。 </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> 内部服务器错误。服务器遇到了不知道如何处理的情况。 </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call cancelInboundOrderByCodeAsync(String inboundNo, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = cancelInboundOrderByCodeValidateBeforeCall(inboundNo, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for createInboundOrder
     * @param idempotencyKey 一个唯一的密钥（例如，UUID），以确保资源的幂等创建。 (required)
     * @param inboundOrderCreateRequest 要创建的入库单信息。 (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> 入库单已成功创建。 </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> 错误的请求。由于被认为是客户端错误（例如，格式错误的请求语法、无效的请求消息帧或欺骗性的请求路由），服务器无法或不会处理该请求。 </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> 未经授权。客户端必须对自己进行身份验证才能获得请求的响应。 </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> 冲突。当请求与服务器的当前状态冲突时，将发送此响应。 </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> 内部服务器错误。服务器遇到了不知道如何处理的情况。 </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createInboundOrderCall(UUID idempotencyKey, InboundOrderCreateRequest inboundOrderCreateRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = inboundOrderCreateRequest;

        // create path and map variables
        String localVarPath = "/api/v1/inbound/orders";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (idempotencyKey != null) {
            localVarHeaderParams.put("Idempotency-Key", localVarApiClient.parameterToString(idempotencyKey));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "BearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createInboundOrderValidateBeforeCall(UUID idempotencyKey, InboundOrderCreateRequest inboundOrderCreateRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'idempotencyKey' is set
        if (idempotencyKey == null) {
            throw new ApiException("Missing the required parameter 'idempotencyKey' when calling createInboundOrder(Async)");
        }

        // verify the required parameter 'inboundOrderCreateRequest' is set
        if (inboundOrderCreateRequest == null) {
            throw new ApiException("Missing the required parameter 'inboundOrderCreateRequest' when calling createInboundOrder(Async)");
        }

        return createInboundOrderCall(idempotencyKey, inboundOrderCreateRequest, _callback);

    }

    /**
     * 创建入库单
     * 在系统中创建一个新的入库单，支持同时创建明细和箱子信息。此操作是幂等的。  **所需权限：** &#x60;inbound:write&#x60;  **使用场景：** - ERP系统推送采购入库单 - 供应商系统创建退货入库单 - 调拨系统创建转库入库单 - 第三方系统集成入库作业 
     * @param idempotencyKey 一个唯一的密钥（例如，UUID），以确保资源的幂等创建。 (required)
     * @param inboundOrderCreateRequest 要创建的入库单信息。 (required)
     * @return InboundOrderResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> 入库单已成功创建。 </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> 错误的请求。由于被认为是客户端错误（例如，格式错误的请求语法、无效的请求消息帧或欺骗性的请求路由），服务器无法或不会处理该请求。 </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> 未经授权。客户端必须对自己进行身份验证才能获得请求的响应。 </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> 冲突。当请求与服务器的当前状态冲突时，将发送此响应。 </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> 内部服务器错误。服务器遇到了不知道如何处理的情况。 </td><td>  -  </td></tr>
     </table>
     */
    public InboundOrderResponse createInboundOrder(UUID idempotencyKey, InboundOrderCreateRequest inboundOrderCreateRequest) throws ApiException {
        ApiResponse<InboundOrderResponse> localVarResp = createInboundOrderWithHttpInfo(idempotencyKey, inboundOrderCreateRequest);
        return localVarResp.getData();
    }

    /**
     * 创建入库单
     * 在系统中创建一个新的入库单，支持同时创建明细和箱子信息。此操作是幂等的。  **所需权限：** &#x60;inbound:write&#x60;  **使用场景：** - ERP系统推送采购入库单 - 供应商系统创建退货入库单 - 调拨系统创建转库入库单 - 第三方系统集成入库作业 
     * @param idempotencyKey 一个唯一的密钥（例如，UUID），以确保资源的幂等创建。 (required)
     * @param inboundOrderCreateRequest 要创建的入库单信息。 (required)
     * @return ApiResponse&lt;InboundOrderResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> 入库单已成功创建。 </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> 错误的请求。由于被认为是客户端错误（例如，格式错误的请求语法、无效的请求消息帧或欺骗性的请求路由），服务器无法或不会处理该请求。 </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> 未经授权。客户端必须对自己进行身份验证才能获得请求的响应。 </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> 冲突。当请求与服务器的当前状态冲突时，将发送此响应。 </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> 内部服务器错误。服务器遇到了不知道如何处理的情况。 </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<InboundOrderResponse> createInboundOrderWithHttpInfo( @NotNull UUID idempotencyKey,  @NotNull InboundOrderCreateRequest inboundOrderCreateRequest) throws ApiException {
        okhttp3.Call localVarCall = createInboundOrderValidateBeforeCall(idempotencyKey, inboundOrderCreateRequest, null);
        Type localVarReturnType = new TypeToken<InboundOrderResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * 创建入库单 (asynchronously)
     * 在系统中创建一个新的入库单，支持同时创建明细和箱子信息。此操作是幂等的。  **所需权限：** &#x60;inbound:write&#x60;  **使用场景：** - ERP系统推送采购入库单 - 供应商系统创建退货入库单 - 调拨系统创建转库入库单 - 第三方系统集成入库作业 
     * @param idempotencyKey 一个唯一的密钥（例如，UUID），以确保资源的幂等创建。 (required)
     * @param inboundOrderCreateRequest 要创建的入库单信息。 (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> 入库单已成功创建。 </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> 错误的请求。由于被认为是客户端错误（例如，格式错误的请求语法、无效的请求消息帧或欺骗性的请求路由），服务器无法或不会处理该请求。 </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> 未经授权。客户端必须对自己进行身份验证才能获得请求的响应。 </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> 冲突。当请求与服务器的当前状态冲突时，将发送此响应。 </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> 内部服务器错误。服务器遇到了不知道如何处理的情况。 </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createInboundOrderAsync(UUID idempotencyKey, InboundOrderCreateRequest inboundOrderCreateRequest, final ApiCallback<InboundOrderResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = createInboundOrderValidateBeforeCall(idempotencyKey, inboundOrderCreateRequest, _callback);
        Type localVarReturnType = new TypeToken<InboundOrderResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getInboundOrderByCode
     * @param inboundNo 入库单号。 (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 入库单详情。 </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> 未经授权。客户端必须对自己进行身份验证才能获得请求的响应。 </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> 未找到。服务器找不到请求的资源。 </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> 内部服务器错误。服务器遇到了不知道如何处理的情况。 </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getInboundOrderByCodeCall(String inboundNo, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/inbound/orders/{inboundNo}"
            .replace("{" + "inboundNo" + "}", localVarApiClient.escapeString(inboundNo.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "BearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getInboundOrderByCodeValidateBeforeCall(String inboundNo, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'inboundNo' is set
        if (inboundNo == null) {
            throw new ApiException("Missing the required parameter 'inboundNo' when calling getInboundOrderByCode(Async)");
        }

        return getInboundOrderByCodeCall(inboundNo, _callback);

    }

    /**
     * 通过入库单号获取入库单
     * 通过入库单号检索特定入库单的详细信息，包括明细和箱子信息。  **所需权限：** &#x60;inbound:read&#x60;  **使用场景：** - 查询入库单详细状态和进度 - 获取入库明细用于对账 - 追踪特定入库单的处理情况 
     * @param inboundNo 入库单号。 (required)
     * @return InboundOrderDetailResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 入库单详情。 </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> 未经授权。客户端必须对自己进行身份验证才能获得请求的响应。 </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> 未找到。服务器找不到请求的资源。 </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> 内部服务器错误。服务器遇到了不知道如何处理的情况。 </td><td>  -  </td></tr>
     </table>
     */
    public InboundOrderDetailResponse getInboundOrderByCode(String inboundNo) throws ApiException {
        ApiResponse<InboundOrderDetailResponse> localVarResp = getInboundOrderByCodeWithHttpInfo(inboundNo);
        return localVarResp.getData();
    }

    /**
     * 通过入库单号获取入库单
     * 通过入库单号检索特定入库单的详细信息，包括明细和箱子信息。  **所需权限：** &#x60;inbound:read&#x60;  **使用场景：** - 查询入库单详细状态和进度 - 获取入库明细用于对账 - 追踪特定入库单的处理情况 
     * @param inboundNo 入库单号。 (required)
     * @return ApiResponse&lt;InboundOrderDetailResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 入库单详情。 </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> 未经授权。客户端必须对自己进行身份验证才能获得请求的响应。 </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> 未找到。服务器找不到请求的资源。 </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> 内部服务器错误。服务器遇到了不知道如何处理的情况。 </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<InboundOrderDetailResponse> getInboundOrderByCodeWithHttpInfo( @NotNull  @Pattern(regexp="^[A-Za-z0-9-]{1,50}$")String inboundNo) throws ApiException {
        okhttp3.Call localVarCall = getInboundOrderByCodeValidateBeforeCall(inboundNo, null);
        Type localVarReturnType = new TypeToken<InboundOrderDetailResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * 通过入库单号获取入库单 (asynchronously)
     * 通过入库单号检索特定入库单的详细信息，包括明细和箱子信息。  **所需权限：** &#x60;inbound:read&#x60;  **使用场景：** - 查询入库单详细状态和进度 - 获取入库明细用于对账 - 追踪特定入库单的处理情况 
     * @param inboundNo 入库单号。 (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 入库单详情。 </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> 未经授权。客户端必须对自己进行身份验证才能获得请求的响应。 </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> 未找到。服务器找不到请求的资源。 </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> 内部服务器错误。服务器遇到了不知道如何处理的情况。 </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getInboundOrderByCodeAsync(String inboundNo, final ApiCallback<InboundOrderDetailResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getInboundOrderByCodeValidateBeforeCall(inboundNo, _callback);
        Type localVarReturnType = new TypeToken<InboundOrderDetailResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listInboundOrders
     * @param pageNumber 页码（从1开始） (optional, default to 1)
     * @param pageSize 每页记录数 (optional, default to 20)
     * @param sort 结果的排序字段。使用逗号分隔的字段列表。 (optional)
     * @param isAsc 排序方向。ASC为升序，DESC为降序。 (optional)
     * @param inboundNo 按入库单号筛选。 (optional)
     * @param inboundType 按入库类型筛选。 (optional)
     * @param status 按入库单状态筛选。 (optional)
     * @param ownerCode 按货主编码筛选。 (optional)
     * @param warehouseCode 按仓库编码筛选。 (optional)
     * @param startDate 创建时间起始日期筛选。 (optional)
     * @param endDate 创建时间结束日期筛选。 (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 入库单的分页列表。 </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> 错误的请求。由于被认为是客户端错误（例如，格式错误的请求语法、无效的请求消息帧或欺骗性的请求路由），服务器无法或不会处理该请求。 </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> 未经授权。客户端必须对自己进行身份验证才能获得请求的响应。 </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> 内部服务器错误。服务器遇到了不知道如何处理的情况。 </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listInboundOrdersCall(Integer pageNumber, Integer pageSize, String sort, SortDirection isAsc, String inboundNo, InboundTypeEnum inboundType, InboundOrderStatusEnum status, String ownerCode, String warehouseCode, LocalDate startDate, LocalDate endDate, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/inbound/orders";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (pageNumber != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pageNumber", pageNumber));
        }

        if (pageSize != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pageSize", pageSize));
        }

        if (sort != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort", sort));
        }

        if (isAsc != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("isAsc", isAsc));
        }

        if (inboundNo != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("inboundNo", inboundNo));
        }

        if (inboundType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("inboundType", inboundType));
        }

        if (status != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("status", status));
        }

        if (ownerCode != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ownerCode", ownerCode));
        }

        if (warehouseCode != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("warehouseCode", warehouseCode));
        }

        if (startDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("startDate", startDate));
        }

        if (endDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("endDate", endDate));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "BearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listInboundOrdersValidateBeforeCall(Integer pageNumber, Integer pageSize, String sort, SortDirection isAsc, String inboundNo, InboundTypeEnum inboundType, InboundOrderStatusEnum status, String ownerCode, String warehouseCode, LocalDate startDate, LocalDate endDate, final ApiCallback _callback) throws ApiException {
        return listInboundOrdersCall(pageNumber, pageSize, sort, isAsc, inboundNo, inboundType, status, ownerCode, warehouseCode, startDate, endDate, _callback);

    }

    /**
     * 列出入库单
     * 检索入库单的分页列表，支持多种筛选条件和排序。  **所需权限：** &#x60;inbound:read&#x60;  **使用场景：** - ERP系统查询入库单状态 - 供应商门户查看入库进度 - 仓库管理系统监控入库作业 - 财务系统核对入库记录 
     * @param pageNumber 页码（从1开始） (optional, default to 1)
     * @param pageSize 每页记录数 (optional, default to 20)
     * @param sort 结果的排序字段。使用逗号分隔的字段列表。 (optional)
     * @param isAsc 排序方向。ASC为升序，DESC为降序。 (optional)
     * @param inboundNo 按入库单号筛选。 (optional)
     * @param inboundType 按入库类型筛选。 (optional)
     * @param status 按入库单状态筛选。 (optional)
     * @param ownerCode 按货主编码筛选。 (optional)
     * @param warehouseCode 按仓库编码筛选。 (optional)
     * @param startDate 创建时间起始日期筛选。 (optional)
     * @param endDate 创建时间结束日期筛选。 (optional)
     * @return InboundOrderListResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 入库单的分页列表。 </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> 错误的请求。由于被认为是客户端错误（例如，格式错误的请求语法、无效的请求消息帧或欺骗性的请求路由），服务器无法或不会处理该请求。 </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> 未经授权。客户端必须对自己进行身份验证才能获得请求的响应。 </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> 内部服务器错误。服务器遇到了不知道如何处理的情况。 </td><td>  -  </td></tr>
     </table>
     */
    public InboundOrderListResponse listInboundOrders(Integer pageNumber, Integer pageSize, String sort, SortDirection isAsc, String inboundNo, InboundTypeEnum inboundType, InboundOrderStatusEnum status, String ownerCode, String warehouseCode, LocalDate startDate, LocalDate endDate) throws ApiException {
        ApiResponse<InboundOrderListResponse> localVarResp = listInboundOrdersWithHttpInfo(pageNumber, pageSize, sort, isAsc, inboundNo, inboundType, status, ownerCode, warehouseCode, startDate, endDate);
        return localVarResp.getData();
    }

    /**
     * 列出入库单
     * 检索入库单的分页列表，支持多种筛选条件和排序。  **所需权限：** &#x60;inbound:read&#x60;  **使用场景：** - ERP系统查询入库单状态 - 供应商门户查看入库进度 - 仓库管理系统监控入库作业 - 财务系统核对入库记录 
     * @param pageNumber 页码（从1开始） (optional, default to 1)
     * @param pageSize 每页记录数 (optional, default to 20)
     * @param sort 结果的排序字段。使用逗号分隔的字段列表。 (optional)
     * @param isAsc 排序方向。ASC为升序，DESC为降序。 (optional)
     * @param inboundNo 按入库单号筛选。 (optional)
     * @param inboundType 按入库类型筛选。 (optional)
     * @param status 按入库单状态筛选。 (optional)
     * @param ownerCode 按货主编码筛选。 (optional)
     * @param warehouseCode 按仓库编码筛选。 (optional)
     * @param startDate 创建时间起始日期筛选。 (optional)
     * @param endDate 创建时间结束日期筛选。 (optional)
     * @return ApiResponse&lt;InboundOrderListResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 入库单的分页列表。 </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> 错误的请求。由于被认为是客户端错误（例如，格式错误的请求语法、无效的请求消息帧或欺骗性的请求路由），服务器无法或不会处理该请求。 </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> 未经授权。客户端必须对自己进行身份验证才能获得请求的响应。 </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> 内部服务器错误。服务器遇到了不知道如何处理的情况。 </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<InboundOrderListResponse> listInboundOrdersWithHttpInfo( @Min(1)Integer pageNumber,  @Min(1) @Max(100)Integer pageSize, String sort, SortDirection isAsc, String inboundNo, InboundTypeEnum inboundType, InboundOrderStatusEnum status, String ownerCode, String warehouseCode, LocalDate startDate, LocalDate endDate) throws ApiException {
        okhttp3.Call localVarCall = listInboundOrdersValidateBeforeCall(pageNumber, pageSize, sort, isAsc, inboundNo, inboundType, status, ownerCode, warehouseCode, startDate, endDate, null);
        Type localVarReturnType = new TypeToken<InboundOrderListResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * 列出入库单 (asynchronously)
     * 检索入库单的分页列表，支持多种筛选条件和排序。  **所需权限：** &#x60;inbound:read&#x60;  **使用场景：** - ERP系统查询入库单状态 - 供应商门户查看入库进度 - 仓库管理系统监控入库作业 - 财务系统核对入库记录 
     * @param pageNumber 页码（从1开始） (optional, default to 1)
     * @param pageSize 每页记录数 (optional, default to 20)
     * @param sort 结果的排序字段。使用逗号分隔的字段列表。 (optional)
     * @param isAsc 排序方向。ASC为升序，DESC为降序。 (optional)
     * @param inboundNo 按入库单号筛选。 (optional)
     * @param inboundType 按入库类型筛选。 (optional)
     * @param status 按入库单状态筛选。 (optional)
     * @param ownerCode 按货主编码筛选。 (optional)
     * @param warehouseCode 按仓库编码筛选。 (optional)
     * @param startDate 创建时间起始日期筛选。 (optional)
     * @param endDate 创建时间结束日期筛选。 (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 入库单的分页列表。 </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> 错误的请求。由于被认为是客户端错误（例如，格式错误的请求语法、无效的请求消息帧或欺骗性的请求路由），服务器无法或不会处理该请求。 </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> 未经授权。客户端必须对自己进行身份验证才能获得请求的响应。 </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> 内部服务器错误。服务器遇到了不知道如何处理的情况。 </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listInboundOrdersAsync(Integer pageNumber, Integer pageSize, String sort, SortDirection isAsc, String inboundNo, InboundTypeEnum inboundType, InboundOrderStatusEnum status, String ownerCode, String warehouseCode, LocalDate startDate, LocalDate endDate, final ApiCallback<InboundOrderListResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = listInboundOrdersValidateBeforeCall(pageNumber, pageSize, sort, isAsc, inboundNo, inboundType, status, ownerCode, warehouseCode, startDate, endDate, _callback);
        Type localVarReturnType = new TypeToken<InboundOrderListResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateInboundOrderByCode
     * @param inboundNo 入库单号。 (required)
     * @param inboundOrderUpdateRequest 要更新的入库单信息。 (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 入库单已成功更新。 </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> 错误的请求。由于被认为是客户端错误（例如，格式错误的请求语法、无效的请求消息帧或欺骗性的请求路由），服务器无法或不会处理该请求。 </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> 未经授权。客户端必须对自己进行身份验证才能获得请求的响应。 </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> 未找到。服务器找不到请求的资源。 </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> 内部服务器错误。服务器遇到了不知道如何处理的情况。 </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateInboundOrderByCodeCall(String inboundNo, InboundOrderUpdateRequest inboundOrderUpdateRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = inboundOrderUpdateRequest;

        // create path and map variables
        String localVarPath = "/api/v1/inbound/orders/{inboundNo}"
            .replace("{" + "inboundNo" + "}", localVarApiClient.escapeString(inboundNo.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "BearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateInboundOrderByCodeValidateBeforeCall(String inboundNo, InboundOrderUpdateRequest inboundOrderUpdateRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'inboundNo' is set
        if (inboundNo == null) {
            throw new ApiException("Missing the required parameter 'inboundNo' when calling updateInboundOrderByCode(Async)");
        }

        // verify the required parameter 'inboundOrderUpdateRequest' is set
        if (inboundOrderUpdateRequest == null) {
            throw new ApiException("Missing the required parameter 'inboundOrderUpdateRequest' when calling updateInboundOrderByCode(Async)");
        }

        return updateInboundOrderByCodeCall(inboundNo, inboundOrderUpdateRequest, _callback);

    }

    /**
     * 通过入库单号更新入库单
     * 通过入库单号更新入库单信息。  **所需权限：** &#x60;inbound:write&#x60;  **使用场景：** - ERP系统同步入库单变更 - 供应商更新预约入库信息 - 调整入库单明细和数量 
     * @param inboundNo 入库单号。 (required)
     * @param inboundOrderUpdateRequest 要更新的入库单信息。 (required)
     * @return InboundOrderResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 入库单已成功更新。 </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> 错误的请求。由于被认为是客户端错误（例如，格式错误的请求语法、无效的请求消息帧或欺骗性的请求路由），服务器无法或不会处理该请求。 </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> 未经授权。客户端必须对自己进行身份验证才能获得请求的响应。 </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> 未找到。服务器找不到请求的资源。 </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> 内部服务器错误。服务器遇到了不知道如何处理的情况。 </td><td>  -  </td></tr>
     </table>
     */
    public InboundOrderResponse updateInboundOrderByCode(String inboundNo, InboundOrderUpdateRequest inboundOrderUpdateRequest) throws ApiException {
        ApiResponse<InboundOrderResponse> localVarResp = updateInboundOrderByCodeWithHttpInfo(inboundNo, inboundOrderUpdateRequest);
        return localVarResp.getData();
    }

    /**
     * 通过入库单号更新入库单
     * 通过入库单号更新入库单信息。  **所需权限：** &#x60;inbound:write&#x60;  **使用场景：** - ERP系统同步入库单变更 - 供应商更新预约入库信息 - 调整入库单明细和数量 
     * @param inboundNo 入库单号。 (required)
     * @param inboundOrderUpdateRequest 要更新的入库单信息。 (required)
     * @return ApiResponse&lt;InboundOrderResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 入库单已成功更新。 </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> 错误的请求。由于被认为是客户端错误（例如，格式错误的请求语法、无效的请求消息帧或欺骗性的请求路由），服务器无法或不会处理该请求。 </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> 未经授权。客户端必须对自己进行身份验证才能获得请求的响应。 </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> 未找到。服务器找不到请求的资源。 </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> 内部服务器错误。服务器遇到了不知道如何处理的情况。 </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<InboundOrderResponse> updateInboundOrderByCodeWithHttpInfo( @NotNull  @Pattern(regexp="^[A-Za-z0-9-]{1,50}$")String inboundNo,  @NotNull InboundOrderUpdateRequest inboundOrderUpdateRequest) throws ApiException {
        okhttp3.Call localVarCall = updateInboundOrderByCodeValidateBeforeCall(inboundNo, inboundOrderUpdateRequest, null);
        Type localVarReturnType = new TypeToken<InboundOrderResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * 通过入库单号更新入库单 (asynchronously)
     * 通过入库单号更新入库单信息。  **所需权限：** &#x60;inbound:write&#x60;  **使用场景：** - ERP系统同步入库单变更 - 供应商更新预约入库信息 - 调整入库单明细和数量 
     * @param inboundNo 入库单号。 (required)
     * @param inboundOrderUpdateRequest 要更新的入库单信息。 (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 入库单已成功更新。 </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> 错误的请求。由于被认为是客户端错误（例如，格式错误的请求语法、无效的请求消息帧或欺骗性的请求路由），服务器无法或不会处理该请求。 </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> 未经授权。客户端必须对自己进行身份验证才能获得请求的响应。 </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> 未找到。服务器找不到请求的资源。 </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> 内部服务器错误。服务器遇到了不知道如何处理的情况。 </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateInboundOrderByCodeAsync(String inboundNo, InboundOrderUpdateRequest inboundOrderUpdateRequest, final ApiCallback<InboundOrderResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateInboundOrderByCodeValidateBeforeCall(inboundNo, inboundOrderUpdateRequest, _callback);
        Type localVarReturnType = new TypeToken<InboundOrderResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateInboundOrderStatus
     * @param inboundNo 入库单号。 (required)
     * @param inboundOrderStatusUpdateRequest 状态更新请求。 (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 入库单状态已成功更新。 </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> 错误的请求。由于被认为是客户端错误（例如，格式错误的请求语法、无效的请求消息帧或欺骗性的请求路由），服务器无法或不会处理该请求。 </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> 未经授权。客户端必须对自己进行身份验证才能获得请求的响应。 </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> 未找到。服务器找不到请求的资源。 </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> 冲突。状态转换不被允许。 </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> 内部服务器错误。服务器遇到了不知道如何处理的情况。 </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateInboundOrderStatusCall(String inboundNo, InboundOrderStatusUpdateRequest inboundOrderStatusUpdateRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = inboundOrderStatusUpdateRequest;

        // create path and map variables
        String localVarPath = "/api/v1/inbound/orders/{inboundNo}/status"
            .replace("{" + "inboundNo" + "}", localVarApiClient.escapeString(inboundNo.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "BearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateInboundOrderStatusValidateBeforeCall(String inboundNo, InboundOrderStatusUpdateRequest inboundOrderStatusUpdateRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'inboundNo' is set
        if (inboundNo == null) {
            throw new ApiException("Missing the required parameter 'inboundNo' when calling updateInboundOrderStatus(Async)");
        }

        // verify the required parameter 'inboundOrderStatusUpdateRequest' is set
        if (inboundOrderStatusUpdateRequest == null) {
            throw new ApiException("Missing the required parameter 'inboundOrderStatusUpdateRequest' when calling updateInboundOrderStatus(Async)");
        }

        return updateInboundOrderStatusCall(inboundNo, inboundOrderStatusUpdateRequest, _callback);

    }

    /**
     * 更新入库单状态
     * 更新入库单的状态，如审核、开始处理。  **所需权限：** &#x60;inbound:write&#x60;  **使用场景：** - ERP系统审核入库单 - 仓库系统更新作业状态 - 供应商确认入库预约 - 系统集成时同步状态变更 
     * @param inboundNo 入库单号。 (required)
     * @param inboundOrderStatusUpdateRequest 状态更新请求。 (required)
     * @return InboundOrderResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 入库单状态已成功更新。 </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> 错误的请求。由于被认为是客户端错误（例如，格式错误的请求语法、无效的请求消息帧或欺骗性的请求路由），服务器无法或不会处理该请求。 </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> 未经授权。客户端必须对自己进行身份验证才能获得请求的响应。 </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> 未找到。服务器找不到请求的资源。 </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> 冲突。状态转换不被允许。 </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> 内部服务器错误。服务器遇到了不知道如何处理的情况。 </td><td>  -  </td></tr>
     </table>
     */
    public InboundOrderResponse updateInboundOrderStatus(String inboundNo, InboundOrderStatusUpdateRequest inboundOrderStatusUpdateRequest) throws ApiException {
        ApiResponse<InboundOrderResponse> localVarResp = updateInboundOrderStatusWithHttpInfo(inboundNo, inboundOrderStatusUpdateRequest);
        return localVarResp.getData();
    }

    /**
     * 更新入库单状态
     * 更新入库单的状态，如审核、开始处理。  **所需权限：** &#x60;inbound:write&#x60;  **使用场景：** - ERP系统审核入库单 - 仓库系统更新作业状态 - 供应商确认入库预约 - 系统集成时同步状态变更 
     * @param inboundNo 入库单号。 (required)
     * @param inboundOrderStatusUpdateRequest 状态更新请求。 (required)
     * @return ApiResponse&lt;InboundOrderResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 入库单状态已成功更新。 </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> 错误的请求。由于被认为是客户端错误（例如，格式错误的请求语法、无效的请求消息帧或欺骗性的请求路由），服务器无法或不会处理该请求。 </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> 未经授权。客户端必须对自己进行身份验证才能获得请求的响应。 </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> 未找到。服务器找不到请求的资源。 </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> 冲突。状态转换不被允许。 </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> 内部服务器错误。服务器遇到了不知道如何处理的情况。 </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<InboundOrderResponse> updateInboundOrderStatusWithHttpInfo( @NotNull  @Pattern(regexp="^[A-Za-z0-9-]{1,50}$")String inboundNo,  @NotNull InboundOrderStatusUpdateRequest inboundOrderStatusUpdateRequest) throws ApiException {
        okhttp3.Call localVarCall = updateInboundOrderStatusValidateBeforeCall(inboundNo, inboundOrderStatusUpdateRequest, null);
        Type localVarReturnType = new TypeToken<InboundOrderResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * 更新入库单状态 (asynchronously)
     * 更新入库单的状态，如审核、开始处理。  **所需权限：** &#x60;inbound:write&#x60;  **使用场景：** - ERP系统审核入库单 - 仓库系统更新作业状态 - 供应商确认入库预约 - 系统集成时同步状态变更 
     * @param inboundNo 入库单号。 (required)
     * @param inboundOrderStatusUpdateRequest 状态更新请求。 (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 入库单状态已成功更新。 </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> 错误的请求。由于被认为是客户端错误（例如，格式错误的请求语法、无效的请求消息帧或欺骗性的请求路由），服务器无法或不会处理该请求。 </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> 未经授权。客户端必须对自己进行身份验证才能获得请求的响应。 </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> 未找到。服务器找不到请求的资源。 </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> 冲突。状态转换不被允许。 </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> 内部服务器错误。服务器遇到了不知道如何处理的情况。 </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateInboundOrderStatusAsync(String inboundNo, InboundOrderStatusUpdateRequest inboundOrderStatusUpdateRequest, final ApiCallback<InboundOrderResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateInboundOrderStatusValidateBeforeCall(inboundNo, inboundOrderStatusUpdateRequest, _callback);
        Type localVarReturnType = new TypeToken<InboundOrderResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
