/*
 * GWMS Public API
 * GWMS（仓库管理系统）的官方公开API。 它为ERP、电子商务平台和TMS等外部系统提供了一个标准化、健壮且易于集成的接口，以便与WMS功能进行交互。  ## 认证机制  本API采用基于JWT的Bearer令牌认证，结合三重凭证验证机制：  1. **客户端凭证（Client Credentials）**：由系统管理员为上游系统生成的clientId和clientSecret 2. **API密钥（API Key）**：由仓库用户生成，关联到特定仓库和权限范围 3. **访问令牌（Access Token）**：通过认证端点获取的JWT令牌，用于API访问  ## 快速开始  1. **获取凭证**：联系系统管理员获取clientId和clientSecret，联系仓库用户获取apiKey 2. **获取令牌**：调用 `POST /auth-api/token` 端点获取访问令牌 3. **调用API**：在请求头中添加 `Authorization: Bearer {access_token}` 调用其他API  ## 认证头部格式  所有API请求（除了认证端点）必须包含以下HTTP头部：  ``` Authorization: Bearer {access_token} ```  其中`{access_token}`是从认证端点获取的JWT令牌。缺少此头部或令牌无效将导致401错误。  ## 权限范围  API访问权限基于以下范围进行控制：  | 权限范围 | 描述 | 适用API | 示例操作 | |---------|------|---------|---------| | `product:read` | 产品数据读取权限 | `/api/v1/products/_*` | 查询产品列表、获取产品详情 | | `product:write` | 产品数据写入权限 | `/api/v1/products/_*` | 创建产品、更新产品信息 | | `warehouse:read` | 仓库数据读取权限 | `/api/v1/warehouses/_*` | 查询仓库列表、获取仓库详情 | | `warehouse:write` | 仓库数据写入权限 | `/api/v1/warehouses/_*` | 创建仓库、更新仓库信息 | | `stock:read` | 库存数据读取权限 | `/api/v1/stock/_*` | 查询库存数量、库存明细 | | `stock:write` | 库存数据写入权限 | `/api/v1/stock/_*` | 库存调整、库存转移 | | `inbound:read` | 入库单读取权限 | `/api/v1/inbound/_*` | 查询入库单列表、获取入库单详情 | | `inbound:write` | 入库单写入权限 | `/api/v1/inbound/_*` | 创建入库单、更新入库单 | | `outbound:read` | 出库单读取权限 | `/api/v1/outbound/_*` | 查询出库单列表、获取出库单详情 | | `outbound:write` | 出库单写入权限 | `/api/v1/outbound/_*` | 创建出库单、更新出库单 | | `express:read` | 物流渠道读取权限 | `/api/v1/expressChannel/_*` | 查询物流渠道列表 | | `express:write` | 物流渠道写入权限 | `/api/v1/expressChannel/_*` | 创建物流渠道、更新物流渠道 |  ## 错误响应  认证失败时，API将返回以下错误响应：  - **401 Unauthorized**：令牌无效、过期或缺失 - **403 Forbidden**：令牌有效但权限不足 - **429 Too Many Requests**：超过访问频率限制  详细的错误响应格式请参考错误响应部分。 
 *
 * The version of the OpenAPI document: 1.0.3
 * Contact: api-support@jmalltech.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.jmalltech.gwms.sdk.api;

import com.jmalltech.gwms.sdk.invoker.ApiCallback;
import com.jmalltech.gwms.sdk.invoker.ApiClient;
import com.jmalltech.gwms.sdk.invoker.ApiException;
import com.jmalltech.gwms.sdk.invoker.ApiResponse;
import com.jmalltech.gwms.sdk.invoker.Configuration;
import com.jmalltech.gwms.sdk.invoker.Pair;
import com.jmalltech.gwms.sdk.invoker.ProgressRequestBody;
import com.jmalltech.gwms.sdk.invoker.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;

import javax.validation.constraints.*;
import javax.validation.Valid;

import com.jmalltech.gwms.sdk.model.ApiErrorResponse;
import com.jmalltech.gwms.sdk.model.EntityStatus;
import com.jmalltech.gwms.sdk.model.SortDirection;
import java.util.UUID;
import com.jmalltech.gwms.sdk.model.WarehouseCreateRequest;
import com.jmalltech.gwms.sdk.model.WarehouseListResponse;
import com.jmalltech.gwms.sdk.model.WarehouseResponse;
import com.jmalltech.gwms.sdk.model.WarehouseUpdateRequest;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class WarehousesApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public WarehousesApi() {
        this(Configuration.getDefaultApiClient());
    }

    public WarehousesApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for createWarehouse
     * @param idempotencyKey 一个唯一的密钥（例如，UUID），以确保资源的幂等创建。 (required)
     * @param warehouseCreateRequest 要创建的仓库信息。 (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> 仓库已成功创建。 </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> 错误的请求。由于被认为是客户端错误（例如，格式错误的请求语法、无效的请求消息帧或欺骗性的请求路由），服务器无法或不会处理该请求。 </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> 未经授权。客户端必须对自己进行身份验证才能获得请求的响应。 </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> 冲突。当请求与服务器的当前状态冲突时，将发送此响应。 </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> 内部服务器错误。服务器遇到了不知道如何处理的情况。 </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createWarehouseCall(UUID idempotencyKey, WarehouseCreateRequest warehouseCreateRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = warehouseCreateRequest;

        // create path and map variables
        String localVarPath = "/api/v1/warehouses";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (idempotencyKey != null) {
            localVarHeaderParams.put("Idempotency-Key", localVarApiClient.parameterToString(idempotencyKey));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "BearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createWarehouseValidateBeforeCall(UUID idempotencyKey, WarehouseCreateRequest warehouseCreateRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'idempotencyKey' is set
        if (idempotencyKey == null) {
            throw new ApiException("Missing the required parameter 'idempotencyKey' when calling createWarehouse(Async)");
        }

        // verify the required parameter 'warehouseCreateRequest' is set
        if (warehouseCreateRequest == null) {
            throw new ApiException("Missing the required parameter 'warehouseCreateRequest' when calling createWarehouse(Async)");
        }

        return createWarehouseCall(idempotencyKey, warehouseCreateRequest, _callback);

    }

    /**
     * 创建仓库
     * 在系统中创建一个新仓库。此操作是幂等的，支持上游系统推送仓库数据。  **所需权限：** &#x60;warehouse:write&#x60;  **使用场景：** - ERP系统推送新建仓库信息 - 系统集成时批量创建仓库主数据 
     * @param idempotencyKey 一个唯一的密钥（例如，UUID），以确保资源的幂等创建。 (required)
     * @param warehouseCreateRequest 要创建的仓库信息。 (required)
     * @return WarehouseResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> 仓库已成功创建。 </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> 错误的请求。由于被认为是客户端错误（例如，格式错误的请求语法、无效的请求消息帧或欺骗性的请求路由），服务器无法或不会处理该请求。 </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> 未经授权。客户端必须对自己进行身份验证才能获得请求的响应。 </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> 冲突。当请求与服务器的当前状态冲突时，将发送此响应。 </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> 内部服务器错误。服务器遇到了不知道如何处理的情况。 </td><td>  -  </td></tr>
     </table>
     */
    public WarehouseResponse createWarehouse(UUID idempotencyKey, WarehouseCreateRequest warehouseCreateRequest) throws ApiException {
        ApiResponse<WarehouseResponse> localVarResp = createWarehouseWithHttpInfo(idempotencyKey, warehouseCreateRequest);
        return localVarResp.getData();
    }

    /**
     * 创建仓库
     * 在系统中创建一个新仓库。此操作是幂等的，支持上游系统推送仓库数据。  **所需权限：** &#x60;warehouse:write&#x60;  **使用场景：** - ERP系统推送新建仓库信息 - 系统集成时批量创建仓库主数据 
     * @param idempotencyKey 一个唯一的密钥（例如，UUID），以确保资源的幂等创建。 (required)
     * @param warehouseCreateRequest 要创建的仓库信息。 (required)
     * @return ApiResponse&lt;WarehouseResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> 仓库已成功创建。 </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> 错误的请求。由于被认为是客户端错误（例如，格式错误的请求语法、无效的请求消息帧或欺骗性的请求路由），服务器无法或不会处理该请求。 </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> 未经授权。客户端必须对自己进行身份验证才能获得请求的响应。 </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> 冲突。当请求与服务器的当前状态冲突时，将发送此响应。 </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> 内部服务器错误。服务器遇到了不知道如何处理的情况。 </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<WarehouseResponse> createWarehouseWithHttpInfo( @NotNull UUID idempotencyKey,  @NotNull WarehouseCreateRequest warehouseCreateRequest) throws ApiException {
        okhttp3.Call localVarCall = createWarehouseValidateBeforeCall(idempotencyKey, warehouseCreateRequest, null);
        Type localVarReturnType = new TypeToken<WarehouseResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * 创建仓库 (asynchronously)
     * 在系统中创建一个新仓库。此操作是幂等的，支持上游系统推送仓库数据。  **所需权限：** &#x60;warehouse:write&#x60;  **使用场景：** - ERP系统推送新建仓库信息 - 系统集成时批量创建仓库主数据 
     * @param idempotencyKey 一个唯一的密钥（例如，UUID），以确保资源的幂等创建。 (required)
     * @param warehouseCreateRequest 要创建的仓库信息。 (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> 仓库已成功创建。 </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> 错误的请求。由于被认为是客户端错误（例如，格式错误的请求语法、无效的请求消息帧或欺骗性的请求路由），服务器无法或不会处理该请求。 </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> 未经授权。客户端必须对自己进行身份验证才能获得请求的响应。 </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> 冲突。当请求与服务器的当前状态冲突时，将发送此响应。 </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> 内部服务器错误。服务器遇到了不知道如何处理的情况。 </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createWarehouseAsync(UUID idempotencyKey, WarehouseCreateRequest warehouseCreateRequest, final ApiCallback<WarehouseResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = createWarehouseValidateBeforeCall(idempotencyKey, warehouseCreateRequest, _callback);
        Type localVarReturnType = new TypeToken<WarehouseResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getWarehouseByCode
     * @param code 仓库编码。 (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 仓库详情。 </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> 未经授权。客户端必须对自己进行身份验证才能获得请求的响应。 </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> 未找到。服务器找不到请求的资源。 </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> 内部服务器错误。服务器遇到了不知道如何处理的情况。 </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getWarehouseByCodeCall(String code, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/warehouses/code/{code}"
            .replace("{" + "code" + "}", localVarApiClient.escapeString(code.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "BearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getWarehouseByCodeValidateBeforeCall(String code, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'code' is set
        if (code == null) {
            throw new ApiException("Missing the required parameter 'code' when calling getWarehouseByCode(Async)");
        }

        return getWarehouseByCodeCall(code, _callback);

    }

    /**
     * 获取仓库详情
     * 通过仓库编码检索特定仓库的详细信息。  **所需权限：** &#x60;warehouse:read&#x60;  **使用场景：** - 验证仓库编码有效性 - 获取仓库详细配置信息 - 查询仓库地址和联系方式 
     * @param code 仓库编码。 (required)
     * @return WarehouseResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 仓库详情。 </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> 未经授权。客户端必须对自己进行身份验证才能获得请求的响应。 </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> 未找到。服务器找不到请求的资源。 </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> 内部服务器错误。服务器遇到了不知道如何处理的情况。 </td><td>  -  </td></tr>
     </table>
     */
    public WarehouseResponse getWarehouseByCode(String code) throws ApiException {
        ApiResponse<WarehouseResponse> localVarResp = getWarehouseByCodeWithHttpInfo(code);
        return localVarResp.getData();
    }

    /**
     * 获取仓库详情
     * 通过仓库编码检索特定仓库的详细信息。  **所需权限：** &#x60;warehouse:read&#x60;  **使用场景：** - 验证仓库编码有效性 - 获取仓库详细配置信息 - 查询仓库地址和联系方式 
     * @param code 仓库编码。 (required)
     * @return ApiResponse&lt;WarehouseResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 仓库详情。 </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> 未经授权。客户端必须对自己进行身份验证才能获得请求的响应。 </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> 未找到。服务器找不到请求的资源。 </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> 内部服务器错误。服务器遇到了不知道如何处理的情况。 </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<WarehouseResponse> getWarehouseByCodeWithHttpInfo( @NotNull String code) throws ApiException {
        okhttp3.Call localVarCall = getWarehouseByCodeValidateBeforeCall(code, null);
        Type localVarReturnType = new TypeToken<WarehouseResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * 获取仓库详情 (asynchronously)
     * 通过仓库编码检索特定仓库的详细信息。  **所需权限：** &#x60;warehouse:read&#x60;  **使用场景：** - 验证仓库编码有效性 - 获取仓库详细配置信息 - 查询仓库地址和联系方式 
     * @param code 仓库编码。 (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 仓库详情。 </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> 未经授权。客户端必须对自己进行身份验证才能获得请求的响应。 </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> 未找到。服务器找不到请求的资源。 </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> 内部服务器错误。服务器遇到了不知道如何处理的情况。 </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getWarehouseByCodeAsync(String code, final ApiCallback<WarehouseResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getWarehouseByCodeValidateBeforeCall(code, _callback);
        Type localVarReturnType = new TypeToken<WarehouseResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listWarehouses
     * @param pageNumber 页码（从1开始） (optional, default to 1)
     * @param pageSize 每页记录数 (optional, default to 20)
     * @param sort 结果的排序字段。使用逗号分隔的字段列表。 (optional)
     * @param isAsc 排序方向。ASC为升序，DESC为降序。 (optional)
     * @param code 按仓库编码筛选。 (optional)
     * @param name 按仓库名称筛选。 (optional)
     * @param status 按仓库状态筛选。 (optional)
     * @param city 按城市筛选。 (optional)
     * @param province 按省/州筛选。 (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 仓库的分页列表。 </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> 错误的请求。由于被认为是客户端错误（例如，格式错误的请求语法、无效的请求消息帧或欺骗性的请求路由），服务器无法或不会处理该请求。 </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> 未经授权。客户端必须对自己进行身份验证才能获得请求的响应。 </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> 内部服务器错误。服务器遇到了不知道如何处理的情况。 </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listWarehousesCall(Integer pageNumber, Integer pageSize, String sort, SortDirection isAsc, String code, String name, EntityStatus status, String city, String province, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/warehouses";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (pageNumber != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pageNumber", pageNumber));
        }

        if (pageSize != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pageSize", pageSize));
        }

        if (sort != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort", sort));
        }

        if (isAsc != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("isAsc", isAsc));
        }

        if (code != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("code", code));
        }

        if (name != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name", name));
        }

        if (status != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("status", status));
        }

        if (city != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("city", city));
        }

        if (province != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("province", province));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "BearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listWarehousesValidateBeforeCall(Integer pageNumber, Integer pageSize, String sort, SortDirection isAsc, String code, String name, EntityStatus status, String city, String province, final ApiCallback _callback) throws ApiException {
        return listWarehousesCall(pageNumber, pageSize, sort, isAsc, code, name, status, city, province, _callback);

    }

    /**
     * 列出仓库
     * 检索仓库的分页列表，允许过滤和排序。  **所需权限：** &#x60;warehouse:read&#x60;  **使用场景：** - ERP系统同步仓库主数据 - 电商平台获取可用仓库列表 - TMS系统查询配送仓库信息 
     * @param pageNumber 页码（从1开始） (optional, default to 1)
     * @param pageSize 每页记录数 (optional, default to 20)
     * @param sort 结果的排序字段。使用逗号分隔的字段列表。 (optional)
     * @param isAsc 排序方向。ASC为升序，DESC为降序。 (optional)
     * @param code 按仓库编码筛选。 (optional)
     * @param name 按仓库名称筛选。 (optional)
     * @param status 按仓库状态筛选。 (optional)
     * @param city 按城市筛选。 (optional)
     * @param province 按省/州筛选。 (optional)
     * @return WarehouseListResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 仓库的分页列表。 </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> 错误的请求。由于被认为是客户端错误（例如，格式错误的请求语法、无效的请求消息帧或欺骗性的请求路由），服务器无法或不会处理该请求。 </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> 未经授权。客户端必须对自己进行身份验证才能获得请求的响应。 </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> 内部服务器错误。服务器遇到了不知道如何处理的情况。 </td><td>  -  </td></tr>
     </table>
     */
    public WarehouseListResponse listWarehouses(Integer pageNumber, Integer pageSize, String sort, SortDirection isAsc, String code, String name, EntityStatus status, String city, String province) throws ApiException {
        ApiResponse<WarehouseListResponse> localVarResp = listWarehousesWithHttpInfo(pageNumber, pageSize, sort, isAsc, code, name, status, city, province);
        return localVarResp.getData();
    }

    /**
     * 列出仓库
     * 检索仓库的分页列表，允许过滤和排序。  **所需权限：** &#x60;warehouse:read&#x60;  **使用场景：** - ERP系统同步仓库主数据 - 电商平台获取可用仓库列表 - TMS系统查询配送仓库信息 
     * @param pageNumber 页码（从1开始） (optional, default to 1)
     * @param pageSize 每页记录数 (optional, default to 20)
     * @param sort 结果的排序字段。使用逗号分隔的字段列表。 (optional)
     * @param isAsc 排序方向。ASC为升序，DESC为降序。 (optional)
     * @param code 按仓库编码筛选。 (optional)
     * @param name 按仓库名称筛选。 (optional)
     * @param status 按仓库状态筛选。 (optional)
     * @param city 按城市筛选。 (optional)
     * @param province 按省/州筛选。 (optional)
     * @return ApiResponse&lt;WarehouseListResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 仓库的分页列表。 </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> 错误的请求。由于被认为是客户端错误（例如，格式错误的请求语法、无效的请求消息帧或欺骗性的请求路由），服务器无法或不会处理该请求。 </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> 未经授权。客户端必须对自己进行身份验证才能获得请求的响应。 </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> 内部服务器错误。服务器遇到了不知道如何处理的情况。 </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<WarehouseListResponse> listWarehousesWithHttpInfo( @Min(1)Integer pageNumber,  @Min(1) @Max(100)Integer pageSize, String sort, SortDirection isAsc, String code, String name, EntityStatus status, String city, String province) throws ApiException {
        okhttp3.Call localVarCall = listWarehousesValidateBeforeCall(pageNumber, pageSize, sort, isAsc, code, name, status, city, province, null);
        Type localVarReturnType = new TypeToken<WarehouseListResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * 列出仓库 (asynchronously)
     * 检索仓库的分页列表，允许过滤和排序。  **所需权限：** &#x60;warehouse:read&#x60;  **使用场景：** - ERP系统同步仓库主数据 - 电商平台获取可用仓库列表 - TMS系统查询配送仓库信息 
     * @param pageNumber 页码（从1开始） (optional, default to 1)
     * @param pageSize 每页记录数 (optional, default to 20)
     * @param sort 结果的排序字段。使用逗号分隔的字段列表。 (optional)
     * @param isAsc 排序方向。ASC为升序，DESC为降序。 (optional)
     * @param code 按仓库编码筛选。 (optional)
     * @param name 按仓库名称筛选。 (optional)
     * @param status 按仓库状态筛选。 (optional)
     * @param city 按城市筛选。 (optional)
     * @param province 按省/州筛选。 (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 仓库的分页列表。 </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> 错误的请求。由于被认为是客户端错误（例如，格式错误的请求语法、无效的请求消息帧或欺骗性的请求路由），服务器无法或不会处理该请求。 </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> 未经授权。客户端必须对自己进行身份验证才能获得请求的响应。 </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> 内部服务器错误。服务器遇到了不知道如何处理的情况。 </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listWarehousesAsync(Integer pageNumber, Integer pageSize, String sort, SortDirection isAsc, String code, String name, EntityStatus status, String city, String province, final ApiCallback<WarehouseListResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = listWarehousesValidateBeforeCall(pageNumber, pageSize, sort, isAsc, code, name, status, city, province, _callback);
        Type localVarReturnType = new TypeToken<WarehouseListResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateWarehouse
     * @param code 仓库编码。 (required)
     * @param warehouseUpdateRequest 要更新的仓库信息。 (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 仓库已成功更新。 </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> 错误的请求。由于被认为是客户端错误（例如，格式错误的请求语法、无效的请求消息帧或欺骗性的请求路由），服务器无法或不会处理该请求。 </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> 未经授权。客户端必须对自己进行身份验证才能获得请求的响应。 </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> 未找到。服务器找不到请求的资源。 </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> 内部服务器错误。服务器遇到了不知道如何处理的情况。 </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateWarehouseCall(String code, WarehouseUpdateRequest warehouseUpdateRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = warehouseUpdateRequest;

        // create path and map variables
        String localVarPath = "/api/v1/warehouses/code/{code}"
            .replace("{" + "code" + "}", localVarApiClient.escapeString(code.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "BearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateWarehouseValidateBeforeCall(String code, WarehouseUpdateRequest warehouseUpdateRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'code' is set
        if (code == null) {
            throw new ApiException("Missing the required parameter 'code' when calling updateWarehouse(Async)");
        }

        // verify the required parameter 'warehouseUpdateRequest' is set
        if (warehouseUpdateRequest == null) {
            throw new ApiException("Missing the required parameter 'warehouseUpdateRequest' when calling updateWarehouse(Async)");
        }

        return updateWarehouseCall(code, warehouseUpdateRequest, _callback);

    }

    /**
     * 更新仓库
     * 更新特定仓库的信息。支持上游系统推送更新后的仓库数据。  **所需权限：** &#x60;warehouse:write&#x60;  **使用场景：** - ERP系统同步仓库信息变更 - 更新仓库地址、联系方式等基础信息 
     * @param code 仓库编码。 (required)
     * @param warehouseUpdateRequest 要更新的仓库信息。 (required)
     * @return WarehouseResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 仓库已成功更新。 </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> 错误的请求。由于被认为是客户端错误（例如，格式错误的请求语法、无效的请求消息帧或欺骗性的请求路由），服务器无法或不会处理该请求。 </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> 未经授权。客户端必须对自己进行身份验证才能获得请求的响应。 </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> 未找到。服务器找不到请求的资源。 </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> 内部服务器错误。服务器遇到了不知道如何处理的情况。 </td><td>  -  </td></tr>
     </table>
     */
    public WarehouseResponse updateWarehouse(String code, WarehouseUpdateRequest warehouseUpdateRequest) throws ApiException {
        ApiResponse<WarehouseResponse> localVarResp = updateWarehouseWithHttpInfo(code, warehouseUpdateRequest);
        return localVarResp.getData();
    }

    /**
     * 更新仓库
     * 更新特定仓库的信息。支持上游系统推送更新后的仓库数据。  **所需权限：** &#x60;warehouse:write&#x60;  **使用场景：** - ERP系统同步仓库信息变更 - 更新仓库地址、联系方式等基础信息 
     * @param code 仓库编码。 (required)
     * @param warehouseUpdateRequest 要更新的仓库信息。 (required)
     * @return ApiResponse&lt;WarehouseResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 仓库已成功更新。 </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> 错误的请求。由于被认为是客户端错误（例如，格式错误的请求语法、无效的请求消息帧或欺骗性的请求路由），服务器无法或不会处理该请求。 </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> 未经授权。客户端必须对自己进行身份验证才能获得请求的响应。 </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> 未找到。服务器找不到请求的资源。 </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> 内部服务器错误。服务器遇到了不知道如何处理的情况。 </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<WarehouseResponse> updateWarehouseWithHttpInfo( @NotNull String code,  @NotNull WarehouseUpdateRequest warehouseUpdateRequest) throws ApiException {
        okhttp3.Call localVarCall = updateWarehouseValidateBeforeCall(code, warehouseUpdateRequest, null);
        Type localVarReturnType = new TypeToken<WarehouseResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * 更新仓库 (asynchronously)
     * 更新特定仓库的信息。支持上游系统推送更新后的仓库数据。  **所需权限：** &#x60;warehouse:write&#x60;  **使用场景：** - ERP系统同步仓库信息变更 - 更新仓库地址、联系方式等基础信息 
     * @param code 仓库编码。 (required)
     * @param warehouseUpdateRequest 要更新的仓库信息。 (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 仓库已成功更新。 </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> 错误的请求。由于被认为是客户端错误（例如，格式错误的请求语法、无效的请求消息帧或欺骗性的请求路由），服务器无法或不会处理该请求。 </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> 未经授权。客户端必须对自己进行身份验证才能获得请求的响应。 </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> 未找到。服务器找不到请求的资源。 </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> 内部服务器错误。服务器遇到了不知道如何处理的情况。 </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateWarehouseAsync(String code, WarehouseUpdateRequest warehouseUpdateRequest, final ApiCallback<WarehouseResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateWarehouseValidateBeforeCall(code, warehouseUpdateRequest, _callback);
        Type localVarReturnType = new TypeToken<WarehouseResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateWarehouseStatus
     * @param code 仓库编码。 (required)
     * @param status 新的仓库状态。 (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 仓库状态已成功更新。 </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> 错误的请求。由于被认为是客户端错误（例如，格式错误的请求语法、无效的请求消息帧或欺骗性的请求路由），服务器无法或不会处理该请求。 </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> 未经授权。客户端必须对自己进行身份验证才能获得请求的响应。 </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> 未找到。服务器找不到请求的资源。 </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> 内部服务器错误。服务器遇到了不知道如何处理的情况。 </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateWarehouseStatusCall(String code, EntityStatus status, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/warehouses/code/{code}/status"
            .replace("{" + "code" + "}", localVarApiClient.escapeString(code.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (status != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("status", status));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "BearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateWarehouseStatusValidateBeforeCall(String code, EntityStatus status, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'code' is set
        if (code == null) {
            throw new ApiException("Missing the required parameter 'code' when calling updateWarehouseStatus(Async)");
        }

        // verify the required parameter 'status' is set
        if (status == null) {
            throw new ApiException("Missing the required parameter 'status' when calling updateWarehouseStatus(Async)");
        }

        return updateWarehouseStatusCall(code, status, _callback);

    }

    /**
     * 更新仓库状态
     * 启用或禁用特定仓库。  **所需权限：** &#x60;warehouse:write&#x60;  **使用场景：** - 临时禁用维护中的仓库 - 启用新投入使用的仓库 - 系统管理和运营控制 
     * @param code 仓库编码。 (required)
     * @param status 新的仓库状态。 (required)
     * @return WarehouseResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 仓库状态已成功更新。 </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> 错误的请求。由于被认为是客户端错误（例如，格式错误的请求语法、无效的请求消息帧或欺骗性的请求路由），服务器无法或不会处理该请求。 </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> 未经授权。客户端必须对自己进行身份验证才能获得请求的响应。 </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> 未找到。服务器找不到请求的资源。 </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> 内部服务器错误。服务器遇到了不知道如何处理的情况。 </td><td>  -  </td></tr>
     </table>
     */
    public WarehouseResponse updateWarehouseStatus(String code, EntityStatus status) throws ApiException {
        ApiResponse<WarehouseResponse> localVarResp = updateWarehouseStatusWithHttpInfo(code, status);
        return localVarResp.getData();
    }

    /**
     * 更新仓库状态
     * 启用或禁用特定仓库。  **所需权限：** &#x60;warehouse:write&#x60;  **使用场景：** - 临时禁用维护中的仓库 - 启用新投入使用的仓库 - 系统管理和运营控制 
     * @param code 仓库编码。 (required)
     * @param status 新的仓库状态。 (required)
     * @return ApiResponse&lt;WarehouseResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 仓库状态已成功更新。 </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> 错误的请求。由于被认为是客户端错误（例如，格式错误的请求语法、无效的请求消息帧或欺骗性的请求路由），服务器无法或不会处理该请求。 </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> 未经授权。客户端必须对自己进行身份验证才能获得请求的响应。 </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> 未找到。服务器找不到请求的资源。 </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> 内部服务器错误。服务器遇到了不知道如何处理的情况。 </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<WarehouseResponse> updateWarehouseStatusWithHttpInfo( @NotNull String code,  @NotNull EntityStatus status) throws ApiException {
        okhttp3.Call localVarCall = updateWarehouseStatusValidateBeforeCall(code, status, null);
        Type localVarReturnType = new TypeToken<WarehouseResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * 更新仓库状态 (asynchronously)
     * 启用或禁用特定仓库。  **所需权限：** &#x60;warehouse:write&#x60;  **使用场景：** - 临时禁用维护中的仓库 - 启用新投入使用的仓库 - 系统管理和运营控制 
     * @param code 仓库编码。 (required)
     * @param status 新的仓库状态。 (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 仓库状态已成功更新。 </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> 错误的请求。由于被认为是客户端错误（例如，格式错误的请求语法、无效的请求消息帧或欺骗性的请求路由），服务器无法或不会处理该请求。 </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> 未经授权。客户端必须对自己进行身份验证才能获得请求的响应。 </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> 未找到。服务器找不到请求的资源。 </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> 内部服务器错误。服务器遇到了不知道如何处理的情况。 </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateWarehouseStatusAsync(String code, EntityStatus status, final ApiCallback<WarehouseResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateWarehouseStatusValidateBeforeCall(code, status, _callback);
        Type localVarReturnType = new TypeToken<WarehouseResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
