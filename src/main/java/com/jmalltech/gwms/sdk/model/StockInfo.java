/*
 * GWMS Public API
 * GWMS（仓库管理系统）的官方公开API。 它为ERP、电子商务平台和TMS等外部系统提供了一个标准化、健壮且易于集成的接口，以便与WMS功能进行交互。  ## 认证机制  本API采用基于JWT的Bearer令牌认证，结合三重凭证验证机制：  1. **客户端凭证（Client Credentials）**：由系统管理员为上游系统生成的clientId和clientSecret 2. **API密钥（API Key）**：由仓库用户生成，关联到特定仓库和权限范围 3. **访问令牌（Access Token）**：通过认证端点获取的JWT令牌，用于API访问  ## 快速开始  1. **获取凭证**：联系系统管理员获取clientId和clientSecret，联系仓库用户获取apiKey 2. **获取令牌**：调用 `POST /auth-api/token` 端点获取访问令牌 3. **调用API**：在请求头中添加 `Authorization: Bearer {access_token}` 调用其他API  ## 认证头部格式  所有API请求（除了认证端点）必须包含以下HTTP头部：  ``` Authorization: Bearer {access_token} ```  其中`{access_token}`是从认证端点获取的JWT令牌。缺少此头部或令牌无效将导致401错误。  ## 权限范围  API访问权限基于以下范围进行控制：  | 权限范围 | 描述 | 适用API | 示例操作 | |---------|------|---------|---------| | `product:read` | 产品数据读取权限 | `/api/v1/products/_*` | 查询产品列表、获取产品详情 | | `product:write` | 产品数据写入权限 | `/api/v1/products/_*` | 创建产品、更新产品信息 | | `warehouse:read` | 仓库数据读取权限 | `/api/v1/warehouses/_*` | 查询仓库列表、获取仓库详情 | | `warehouse:write` | 仓库数据写入权限 | `/api/v1/warehouses/_*` | 创建仓库、更新仓库信息 | | `stock:read` | 库存数据读取权限 | `/api/v1/stock/_*` | 查询库存数量、库存明细 | | `stock:write` | 库存数据写入权限 | `/api/v1/stock/_*` | 库存调整、库存转移 | | `inbound:read` | 入库单读取权限 | `/api/v1/inbound/_*` | 查询入库单列表、获取入库单详情 | | `inbound:write` | 入库单写入权限 | `/api/v1/inbound/_*` | 创建入库单、更新入库单 | | `outbound:read` | 出库单读取权限 | `/api/v1/outbound/_*` | 查询出库单列表、获取出库单详情 | | `outbound:write` | 出库单写入权限 | `/api/v1/outbound/_*` | 创建出库单、更新出库单 | | `express:read` | 物流渠道读取权限 | `/api/v1/expressChannel/_*` | 查询物流渠道列表 | | `express:write` | 物流渠道写入权限 | `/api/v1/expressChannel/_*` | 创建物流渠道、更新物流渠道 |  ## 错误响应  认证失败时，API将返回以下错误响应：  - **401 Unauthorized**：令牌无效、过期或缺失 - **403 Forbidden**：令牌有效但权限不足 - **429 Too Many Requests**：超过访问频率限制  详细的错误响应格式请参考错误响应部分。 
 *
 * The version of the OpenAPI document: 1.0.3
 * Contact: api-support@jmalltech.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.jmalltech.gwms.sdk.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.jmalltech.gwms.sdk.model.StockDetailInfo;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.io.Serializable;
import javax.validation.constraints.*;
import javax.validation.Valid;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import com.jmalltech.gwms.sdk.invoker.JSON;

/**
 * StockInfo
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class StockInfo implements Serializable {
  private static final long serialVersionUID = 1L;

  public static final String SERIALIZED_NAME_WAREHOUSE_CODE = "warehouseCode";
  @SerializedName(SERIALIZED_NAME_WAREHOUSE_CODE)
  private String warehouseCode;

  public static final String SERIALIZED_NAME_GSKU = "gsku";
  @SerializedName(SERIALIZED_NAME_GSKU)
  private String gsku;

  public static final String SERIALIZED_NAME_PRODUCT_NAME = "productName";
  @SerializedName(SERIALIZED_NAME_PRODUCT_NAME)
  private String productName;

  public static final String SERIALIZED_NAME_LENGTH = "length";
  @SerializedName(SERIALIZED_NAME_LENGTH)
  private Double length;

  public static final String SERIALIZED_NAME_WIDTH = "width";
  @SerializedName(SERIALIZED_NAME_WIDTH)
  private Double width;

  public static final String SERIALIZED_NAME_HEIGHT = "height";
  @SerializedName(SERIALIZED_NAME_HEIGHT)
  private Double height;

  public static final String SERIALIZED_NAME_WEIGHT = "weight";
  @SerializedName(SERIALIZED_NAME_WEIGHT)
  private Double weight;

  public static final String SERIALIZED_NAME_QUALIFIED = "qualified";
  @SerializedName(SERIALIZED_NAME_QUALIFIED)
  private Integer qualified;

  public static final String SERIALIZED_NAME_UNQUALIFIED = "unqualified";
  @SerializedName(SERIALIZED_NAME_UNQUALIFIED)
  private Integer unqualified;

  public static final String SERIALIZED_NAME_DETAILS = "details";
  @SerializedName(SERIALIZED_NAME_DETAILS)
  private List<@Valid StockDetailInfo> details;

  public StockInfo() {
  }

  public StockInfo warehouseCode(String warehouseCode) {
    this.warehouseCode = warehouseCode;
    return this;
  }

   /**
   * 仓库编码
   * @return warehouseCode
  **/
  @javax.annotation.Nullable

  public String getWarehouseCode() {
    return warehouseCode;
  }

  public void setWarehouseCode(String warehouseCode) {
    this.warehouseCode = warehouseCode;
  }


  public StockInfo gsku(String gsku) {
    this.gsku = gsku;
    return this;
  }

   /**
   * 产品gsku
   * @return gsku
  **/
  @javax.annotation.Nullable

  public String getGsku() {
    return gsku;
  }

  public void setGsku(String gsku) {
    this.gsku = gsku;
  }


  public StockInfo productName(String productName) {
    this.productName = productName;
    return this;
  }

   /**
   * 产品名称
   * @return productName
  **/
  @javax.annotation.Nullable

  public String getProductName() {
    return productName;
  }

  public void setProductName(String productName) {
    this.productName = productName;
  }


  public StockInfo length(Double length) {
    this.length = length;
    return this;
  }

   /**
   * 产品长度(Inch)
   * @return length
  **/
  @javax.annotation.Nullable

  public Double getLength() {
    return length;
  }

  public void setLength(Double length) {
    this.length = length;
  }


  public StockInfo width(Double width) {
    this.width = width;
    return this;
  }

   /**
   * 产品宽度(Inch)
   * @return width
  **/
  @javax.annotation.Nullable

  public Double getWidth() {
    return width;
  }

  public void setWidth(Double width) {
    this.width = width;
  }


  public StockInfo height(Double height) {
    this.height = height;
    return this;
  }

   /**
   * 产品高度(Inch)
   * @return height
  **/
  @javax.annotation.Nullable

  public Double getHeight() {
    return height;
  }

  public void setHeight(Double height) {
    this.height = height;
  }


  public StockInfo weight(Double weight) {
    this.weight = weight;
    return this;
  }

   /**
   * 产品重量(LB)
   * @return weight
  **/
  @javax.annotation.Nullable

  public Double getWeight() {
    return weight;
  }

  public void setWeight(Double weight) {
    this.weight = weight;
  }


  public StockInfo qualified(Integer qualified) {
    this.qualified = qualified;
    return this;
  }

   /**
   * 合格总数
   * @return qualified
  **/
  @javax.annotation.Nullable

  public Integer getQualified() {
    return qualified;
  }

  public void setQualified(Integer qualified) {
    this.qualified = qualified;
  }


  public StockInfo unqualified(Integer unqualified) {
    this.unqualified = unqualified;
    return this;
  }

   /**
   * 不合格总数
   * @return unqualified
  **/
  @javax.annotation.Nullable

  public Integer getUnqualified() {
    return unqualified;
  }

  public void setUnqualified(Integer unqualified) {
    this.unqualified = unqualified;
  }


  public StockInfo details(List<@Valid StockDetailInfo> details) {
    this.details = details;
    return this;
  }

  public StockInfo addDetailsItem(StockDetailInfo detailsItem) {
    if (this.details == null) {
      this.details = new ArrayList<>();
    }
    this.details.add(detailsItem);
    return this;
  }

   /**
   * Get details
   * @return details
  **/
  @javax.annotation.Nullable
  @Valid

  public List<@Valid StockDetailInfo> getDetails() {
    return details;
  }

  public void setDetails(List<@Valid StockDetailInfo> details) {
    this.details = details;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    StockInfo stockInfo = (StockInfo) o;
    return Objects.equals(this.warehouseCode, stockInfo.warehouseCode) &&
        Objects.equals(this.gsku, stockInfo.gsku) &&
        Objects.equals(this.productName, stockInfo.productName) &&
        Objects.equals(this.length, stockInfo.length) &&
        Objects.equals(this.width, stockInfo.width) &&
        Objects.equals(this.height, stockInfo.height) &&
        Objects.equals(this.weight, stockInfo.weight) &&
        Objects.equals(this.qualified, stockInfo.qualified) &&
        Objects.equals(this.unqualified, stockInfo.unqualified) &&
        Objects.equals(this.details, stockInfo.details);
  }

  @Override
  public int hashCode() {
    return Objects.hash(warehouseCode, gsku, productName, length, width, height, weight, qualified, unqualified, details);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class StockInfo {\n");
    sb.append("    warehouseCode: ").append(toIndentedString(warehouseCode)).append("\n");
    sb.append("    gsku: ").append(toIndentedString(gsku)).append("\n");
    sb.append("    productName: ").append(toIndentedString(productName)).append("\n");
    sb.append("    length: ").append(toIndentedString(length)).append("\n");
    sb.append("    width: ").append(toIndentedString(width)).append("\n");
    sb.append("    height: ").append(toIndentedString(height)).append("\n");
    sb.append("    weight: ").append(toIndentedString(weight)).append("\n");
    sb.append("    qualified: ").append(toIndentedString(qualified)).append("\n");
    sb.append("    unqualified: ").append(toIndentedString(unqualified)).append("\n");
    sb.append("    details: ").append(toIndentedString(details)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("warehouseCode");
    openapiFields.add("gsku");
    openapiFields.add("productName");
    openapiFields.add("length");
    openapiFields.add("width");
    openapiFields.add("height");
    openapiFields.add("weight");
    openapiFields.add("qualified");
    openapiFields.add("unqualified");
    openapiFields.add("details");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to StockInfo
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!StockInfo.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in StockInfo is not found in the empty JSON string", StockInfo.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!StockInfo.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `StockInfo` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("warehouseCode") != null && !jsonObj.get("warehouseCode").isJsonNull()) && !jsonObj.get("warehouseCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `warehouseCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("warehouseCode").toString()));
      }
      if ((jsonObj.get("gsku") != null && !jsonObj.get("gsku").isJsonNull()) && !jsonObj.get("gsku").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `gsku` to be a primitive type in the JSON string but got `%s`", jsonObj.get("gsku").toString()));
      }
      if ((jsonObj.get("productName") != null && !jsonObj.get("productName").isJsonNull()) && !jsonObj.get("productName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `productName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("productName").toString()));
      }
      if (jsonObj.get("details") != null && !jsonObj.get("details").isJsonNull()) {
        JsonArray jsonArraydetails = jsonObj.getAsJsonArray("details");
        if (jsonArraydetails != null) {
          // ensure the json data is an array
          if (!jsonObj.get("details").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `details` to be an array in the JSON string but got `%s`", jsonObj.get("details").toString()));
          }

          // validate the optional field `details` (array)
          for (int i = 0; i < jsonArraydetails.size(); i++) {
            StockDetailInfo.validateJsonElement(jsonArraydetails.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!StockInfo.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'StockInfo' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<StockInfo> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(StockInfo.class));

       return (TypeAdapter<T>) new TypeAdapter<StockInfo>() {
           @Override
           public void write(JsonWriter out, StockInfo value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public StockInfo read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of StockInfo given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of StockInfo
  * @throws IOException if the JSON string is invalid with respect to StockInfo
  */
  public static StockInfo fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, StockInfo.class);
  }

 /**
  * Convert an instance of StockInfo to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

