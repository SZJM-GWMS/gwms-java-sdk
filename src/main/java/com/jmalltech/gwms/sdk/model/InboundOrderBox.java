/*
 * GWMS Public API
 * GWMS（仓库管理系统）的官方公开API。 它为ERP、电子商务平台和TMS等外部系统提供了一个标准化、健壮且易于集成的接口，以便与WMS功能进行交互。  ## 认证机制  本API采用基于JWT的Bearer令牌认证，结合三重凭证验证机制：  1. **客户端凭证（Client Credentials）**：由系统管理员为上游系统生成的clientId和clientSecret 2. **API密钥（API Key）**：由仓库用户生成，关联到特定仓库和权限范围 3. **访问令牌（Access Token）**：通过认证端点获取的JWT令牌，用于API访问  ## 快速开始  1. **获取凭证**：联系系统管理员获取clientId和clientSecret，联系仓库用户获取apiKey 2. **获取令牌**：调用 `POST /auth-api/token` 端点获取访问令牌 3. **调用API**：在请求头中添加 `Authorization: Bearer {access_token}` 调用其他API  ## 认证头部格式  所有API请求（除了认证端点）必须包含以下HTTP头部：  ``` Authorization: Bearer {access_token} ```  其中`{access_token}`是从认证端点获取的JWT令牌。缺少此头部或令牌无效将导致401错误。  ## 权限范围  API访问权限基于以下范围进行控制：  | 权限范围 | 描述 | 适用API | 示例操作 | |---------|------|---------|---------| | `product:read` | 产品数据读取权限 | `/api/v1/products/_*` | 查询产品列表、获取产品详情 | | `product:write` | 产品数据写入权限 | `/api/v1/products/_*` | 创建产品、更新产品信息 | | `warehouse:read` | 仓库数据读取权限 | `/api/v1/warehouses/_*` | 查询仓库列表、获取仓库详情 | | `warehouse:write` | 仓库数据写入权限 | `/api/v1/warehouses/_*` | 创建仓库、更新仓库信息 | | `stock:read` | 库存数据读取权限 | `/api/v1/stock/_*` | 查询库存数量、库存明细 | | `stock:write` | 库存数据写入权限 | `/api/v1/stock/_*` | 库存调整、库存转移 | | `inbound:read` | 入库单读取权限 | `/api/v1/inbound/_*` | 查询入库单列表、获取入库单详情 | | `inbound:write` | 入库单写入权限 | `/api/v1/inbound/_*` | 创建入库单、更新入库单 | | `outbound:read` | 出库单读取权限 | `/api/v1/outbound/_*` | 查询出库单列表、获取出库单详情 | | `outbound:write` | 出库单写入权限 | `/api/v1/outbound/_*` | 创建出库单、更新出库单 | | `express:read` | 物流渠道读取权限 | `/api/v1/expressChannel/_*` | 查询物流渠道列表 | | `express:write` | 物流渠道写入权限 | `/api/v1/expressChannel/_*` | 创建物流渠道、更新物流渠道 |  ## 错误响应  认证失败时，API将返回以下错误响应：  - **401 Unauthorized**：令牌无效、过期或缺失 - **403 Forbidden**：令牌有效但权限不足 - **429 Too Many Requests**：超过访问频率限制  详细的错误响应格式请参考错误响应部分。 
 *
 * The version of the OpenAPI document: 1.0.3
 * Contact: api-support@jmalltech.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.jmalltech.gwms.sdk.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.jmalltech.gwms.sdk.model.InboundDimensions;
import com.jmalltech.gwms.sdk.model.InboundOrderDetail;
import com.jmalltech.gwms.sdk.model.InboundWeight;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.io.Serializable;
import javax.validation.constraints.*;
import javax.validation.Valid;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import com.jmalltech.gwms.sdk.invoker.JSON;

/**
 * InboundOrderBox
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class InboundOrderBox implements Serializable {
  private static final long serialVersionUID = 1L;

  public static final String SERIALIZED_NAME_CREATE_BY = "createBy";
  @SerializedName(SERIALIZED_NAME_CREATE_BY)
  private Long createBy;

  public static final String SERIALIZED_NAME_CREATE_TIME = "createTime";
  @SerializedName(SERIALIZED_NAME_CREATE_TIME)
  private OffsetDateTime createTime;

  public static final String SERIALIZED_NAME_UPDATE_BY = "updateBy";
  @SerializedName(SERIALIZED_NAME_UPDATE_BY)
  private Long updateBy;

  public static final String SERIALIZED_NAME_UPDATE_TIME = "updateTime";
  @SerializedName(SERIALIZED_NAME_UPDATE_TIME)
  private OffsetDateTime updateTime;

  public static final String SERIALIZED_NAME_PARAMS = "params";
  @SerializedName(SERIALIZED_NAME_PARAMS)
  private Map<String, Object> params = new HashMap<>();

  public static final String SERIALIZED_NAME_BOX_NO = "boxNo";
  @SerializedName(SERIALIZED_NAME_BOX_NO)
  private String boxNo;

  public static final String SERIALIZED_NAME_BOX_START_NO = "boxStartNo";
  @SerializedName(SERIALIZED_NAME_BOX_START_NO)
  private Integer boxStartNo;

  public static final String SERIALIZED_NAME_BOX_END_NO = "boxEndNo";
  @SerializedName(SERIALIZED_NAME_BOX_END_NO)
  private Integer boxEndNo;

  public static final String SERIALIZED_NAME_BOX_COUNT = "boxCount";
  @SerializedName(SERIALIZED_NAME_BOX_COUNT)
  private Integer boxCount;

  public static final String SERIALIZED_NAME_DIMENSIONS = "dimensions";
  @SerializedName(SERIALIZED_NAME_DIMENSIONS)
  private InboundDimensions dimensions;

  public static final String SERIALIZED_NAME_WEIGHT = "weight";
  @SerializedName(SERIALIZED_NAME_WEIGHT)
  private InboundWeight weight;

  public static final String SERIALIZED_NAME_TOTAL_VOLUME = "totalVolume";
  @SerializedName(SERIALIZED_NAME_TOTAL_VOLUME)
  private Double totalVolume;

  public static final String SERIALIZED_NAME_TOTAL_WEIGHT = "totalWeight";
  @SerializedName(SERIALIZED_NAME_TOTAL_WEIGHT)
  private Double totalWeight;

  public static final String SERIALIZED_NAME_DETAILS = "details";
  @SerializedName(SERIALIZED_NAME_DETAILS)
  private List<@Valid InboundOrderDetail> details;

  public InboundOrderBox() {
  }

  public InboundOrderBox createBy(Long createBy) {
    this.createBy = createBy;
    return this;
  }

   /**
   * 创建者ID
   * @return createBy
  **/
  @javax.annotation.Nullable

  public Long getCreateBy() {
    return createBy;
  }

  public void setCreateBy(Long createBy) {
    this.createBy = createBy;
  }


  public InboundOrderBox createTime(OffsetDateTime createTime) {
    this.createTime = createTime;
    return this;
  }

   /**
   * 创建时间
   * @return createTime
  **/
  @javax.annotation.Nullable
  @Valid

  public OffsetDateTime getCreateTime() {
    return createTime;
  }

  public void setCreateTime(OffsetDateTime createTime) {
    this.createTime = createTime;
  }


  public InboundOrderBox updateBy(Long updateBy) {
    this.updateBy = updateBy;
    return this;
  }

   /**
   * 更新者ID
   * @return updateBy
  **/
  @javax.annotation.Nullable

  public Long getUpdateBy() {
    return updateBy;
  }

  public void setUpdateBy(Long updateBy) {
    this.updateBy = updateBy;
  }


  public InboundOrderBox updateTime(OffsetDateTime updateTime) {
    this.updateTime = updateTime;
    return this;
  }

   /**
   * 更新时间
   * @return updateTime
  **/
  @javax.annotation.Nullable
  @Valid

  public OffsetDateTime getUpdateTime() {
    return updateTime;
  }

  public void setUpdateTime(OffsetDateTime updateTime) {
    this.updateTime = updateTime;
  }


  public InboundOrderBox params(Map<String, Object> params) {
    this.params = params;
    return this;
  }

  public InboundOrderBox putParamsItem(String key, Object paramsItem) {
    if (this.params == null) {
      this.params = new HashMap<>();
    }
    this.params.put(key, paramsItem);
    return this;
  }

   /**
   * 扩展参数
   * @return params
  **/
  @javax.annotation.Nullable

  public Map<String, Object> getParams() {
    return params;
  }

  public void setParams(Map<String, Object> params) {
    this.params = params;
  }


  public InboundOrderBox boxNo(String boxNo) {
    this.boxNo = boxNo;
    return this;
  }

   /**
   * 箱号
   * @return boxNo
  **/
  @javax.annotation.Nullable
 @Size(max=50)
  public String getBoxNo() {
    return boxNo;
  }

  public void setBoxNo(String boxNo) {
    this.boxNo = boxNo;
  }


  public InboundOrderBox boxStartNo(Integer boxStartNo) {
    this.boxStartNo = boxStartNo;
    return this;
  }

   /**
   * 起始箱号
   * minimum: 1
   * @return boxStartNo
  **/
  @javax.annotation.Nullable
 @Min(1)
  public Integer getBoxStartNo() {
    return boxStartNo;
  }

  public void setBoxStartNo(Integer boxStartNo) {
    this.boxStartNo = boxStartNo;
  }


  public InboundOrderBox boxEndNo(Integer boxEndNo) {
    this.boxEndNo = boxEndNo;
    return this;
  }

   /**
   * 结束箱号
   * minimum: 1
   * @return boxEndNo
  **/
  @javax.annotation.Nullable
 @Min(1)
  public Integer getBoxEndNo() {
    return boxEndNo;
  }

  public void setBoxEndNo(Integer boxEndNo) {
    this.boxEndNo = boxEndNo;
  }


  public InboundOrderBox boxCount(Integer boxCount) {
    this.boxCount = boxCount;
    return this;
  }

   /**
   * 箱子数量
   * minimum: 1
   * @return boxCount
  **/
  @javax.annotation.Nullable
 @Min(1)
  public Integer getBoxCount() {
    return boxCount;
  }

  public void setBoxCount(Integer boxCount) {
    this.boxCount = boxCount;
  }


  public InboundOrderBox dimensions(InboundDimensions dimensions) {
    this.dimensions = dimensions;
    return this;
  }

   /**
   * Get dimensions
   * @return dimensions
  **/
  @javax.annotation.Nullable
  @Valid

  public InboundDimensions getDimensions() {
    return dimensions;
  }

  public void setDimensions(InboundDimensions dimensions) {
    this.dimensions = dimensions;
  }


  public InboundOrderBox weight(InboundWeight weight) {
    this.weight = weight;
    return this;
  }

   /**
   * Get weight
   * @return weight
  **/
  @javax.annotation.Nullable
  @Valid

  public InboundWeight getWeight() {
    return weight;
  }

  public void setWeight(InboundWeight weight) {
    this.weight = weight;
  }


  public InboundOrderBox totalVolume(Double totalVolume) {
    this.totalVolume = totalVolume;
    return this;
  }

   /**
   * 总体积
   * minimum: 0
   * @return totalVolume
  **/
  @javax.annotation.Nullable
 @DecimalMin("0")
  public Double getTotalVolume() {
    return totalVolume;
  }

  public void setTotalVolume(Double totalVolume) {
    this.totalVolume = totalVolume;
  }


  public InboundOrderBox totalWeight(Double totalWeight) {
    this.totalWeight = totalWeight;
    return this;
  }

   /**
   * 总重量
   * minimum: 0
   * @return totalWeight
  **/
  @javax.annotation.Nullable
 @DecimalMin("0")
  public Double getTotalWeight() {
    return totalWeight;
  }

  public void setTotalWeight(Double totalWeight) {
    this.totalWeight = totalWeight;
  }


  public InboundOrderBox details(List<@Valid InboundOrderDetail> details) {
    this.details = details;
    return this;
  }

  public InboundOrderBox addDetailsItem(InboundOrderDetail detailsItem) {
    if (this.details == null) {
      this.details = new ArrayList<>();
    }
    this.details.add(detailsItem);
    return this;
  }

   /**
   * 箱内明细列表
   * @return details
  **/
  @javax.annotation.Nullable
  @Valid

  public List<@Valid InboundOrderDetail> getDetails() {
    return details;
  }

  public void setDetails(List<@Valid InboundOrderDetail> details) {
    this.details = details;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    InboundOrderBox inboundOrderBox = (InboundOrderBox) o;
    return Objects.equals(this.createBy, inboundOrderBox.createBy) &&
        Objects.equals(this.createTime, inboundOrderBox.createTime) &&
        Objects.equals(this.updateBy, inboundOrderBox.updateBy) &&
        Objects.equals(this.updateTime, inboundOrderBox.updateTime) &&
        Objects.equals(this.params, inboundOrderBox.params) &&
        Objects.equals(this.boxNo, inboundOrderBox.boxNo) &&
        Objects.equals(this.boxStartNo, inboundOrderBox.boxStartNo) &&
        Objects.equals(this.boxEndNo, inboundOrderBox.boxEndNo) &&
        Objects.equals(this.boxCount, inboundOrderBox.boxCount) &&
        Objects.equals(this.dimensions, inboundOrderBox.dimensions) &&
        Objects.equals(this.weight, inboundOrderBox.weight) &&
        Objects.equals(this.totalVolume, inboundOrderBox.totalVolume) &&
        Objects.equals(this.totalWeight, inboundOrderBox.totalWeight) &&
        Objects.equals(this.details, inboundOrderBox.details);
  }

  @Override
  public int hashCode() {
    return Objects.hash(createBy, createTime, updateBy, updateTime, params, boxNo, boxStartNo, boxEndNo, boxCount, dimensions, weight, totalVolume, totalWeight, details);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class InboundOrderBox {\n");
    sb.append("    createBy: ").append(toIndentedString(createBy)).append("\n");
    sb.append("    createTime: ").append(toIndentedString(createTime)).append("\n");
    sb.append("    updateBy: ").append(toIndentedString(updateBy)).append("\n");
    sb.append("    updateTime: ").append(toIndentedString(updateTime)).append("\n");
    sb.append("    params: ").append(toIndentedString(params)).append("\n");
    sb.append("    boxNo: ").append(toIndentedString(boxNo)).append("\n");
    sb.append("    boxStartNo: ").append(toIndentedString(boxStartNo)).append("\n");
    sb.append("    boxEndNo: ").append(toIndentedString(boxEndNo)).append("\n");
    sb.append("    boxCount: ").append(toIndentedString(boxCount)).append("\n");
    sb.append("    dimensions: ").append(toIndentedString(dimensions)).append("\n");
    sb.append("    weight: ").append(toIndentedString(weight)).append("\n");
    sb.append("    totalVolume: ").append(toIndentedString(totalVolume)).append("\n");
    sb.append("    totalWeight: ").append(toIndentedString(totalWeight)).append("\n");
    sb.append("    details: ").append(toIndentedString(details)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("createBy");
    openapiFields.add("createTime");
    openapiFields.add("updateBy");
    openapiFields.add("updateTime");
    openapiFields.add("params");
    openapiFields.add("boxNo");
    openapiFields.add("boxStartNo");
    openapiFields.add("boxEndNo");
    openapiFields.add("boxCount");
    openapiFields.add("dimensions");
    openapiFields.add("weight");
    openapiFields.add("totalVolume");
    openapiFields.add("totalWeight");
    openapiFields.add("details");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to InboundOrderBox
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!InboundOrderBox.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in InboundOrderBox is not found in the empty JSON string", InboundOrderBox.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!InboundOrderBox.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `InboundOrderBox` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("boxNo") != null && !jsonObj.get("boxNo").isJsonNull()) && !jsonObj.get("boxNo").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `boxNo` to be a primitive type in the JSON string but got `%s`", jsonObj.get("boxNo").toString()));
      }
      // validate the optional field `dimensions`
      if (jsonObj.get("dimensions") != null && !jsonObj.get("dimensions").isJsonNull()) {
        InboundDimensions.validateJsonElement(jsonObj.get("dimensions"));
      }
      // validate the optional field `weight`
      if (jsonObj.get("weight") != null && !jsonObj.get("weight").isJsonNull()) {
        InboundWeight.validateJsonElement(jsonObj.get("weight"));
      }
      if (jsonObj.get("details") != null && !jsonObj.get("details").isJsonNull()) {
        JsonArray jsonArraydetails = jsonObj.getAsJsonArray("details");
        if (jsonArraydetails != null) {
          // ensure the json data is an array
          if (!jsonObj.get("details").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `details` to be an array in the JSON string but got `%s`", jsonObj.get("details").toString()));
          }

          // validate the optional field `details` (array)
          for (int i = 0; i < jsonArraydetails.size(); i++) {
            InboundOrderDetail.validateJsonElement(jsonArraydetails.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!InboundOrderBox.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'InboundOrderBox' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<InboundOrderBox> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(InboundOrderBox.class));

       return (TypeAdapter<T>) new TypeAdapter<InboundOrderBox>() {
           @Override
           public void write(JsonWriter out, InboundOrderBox value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public InboundOrderBox read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of InboundOrderBox given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of InboundOrderBox
  * @throws IOException if the JSON string is invalid with respect to InboundOrderBox
  */
  public static InboundOrderBox fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, InboundOrderBox.class);
  }

 /**
  * Convert an instance of InboundOrderBox to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

