/*
 * GWMS Public API
 * GWMS（仓库管理系统）的官方公开API。 它为ERP、电子商务平台和TMS等外部系统提供了一个标准化、健壮且易于集成的接口，以便与WMS功能进行交互。  ## 认证机制  本API采用基于JWT的Bearer令牌认证，结合三重凭证验证机制：  1. **客户端凭证（Client Credentials）**：由系统管理员为上游系统生成的clientId和clientSecret 2. **API密钥（API Key）**：由仓库用户生成，关联到特定仓库和权限范围 3. **访问令牌（Access Token）**：通过认证端点获取的JWT令牌，用于API访问  ## 快速开始  1. **获取凭证**：联系系统管理员获取clientId和clientSecret，联系仓库用户获取apiKey 2. **获取令牌**：调用 `POST /auth-api/token` 端点获取访问令牌 3. **调用API**：在请求头中添加 `Authorization: Bearer {access_token}` 调用其他API  ## 认证头部格式  所有API请求（除了认证端点）必须包含以下HTTP头部：  ``` Authorization: Bearer {access_token} ```  其中`{access_token}`是从认证端点获取的JWT令牌。缺少此头部或令牌无效将导致401错误。  ## 权限范围  API访问权限基于以下范围进行控制：  | 权限范围 | 描述 | 适用API | 示例操作 | |---------|------|---------|---------| | `product:read` | 产品数据读取权限 | `/api/v1/products/_*` | 查询产品列表、获取产品详情 | | `product:write` | 产品数据写入权限 | `/api/v1/products/_*` | 创建产品、更新产品信息 | | `warehouse:read` | 仓库数据读取权限 | `/api/v1/warehouses/_*` | 查询仓库列表、获取仓库详情 | | `warehouse:write` | 仓库数据写入权限 | `/api/v1/warehouses/_*` | 创建仓库、更新仓库信息 | | `stock:read` | 库存数据读取权限 | `/api/v1/stock/_*` | 查询库存数量、库存明细 | | `stock:write` | 库存数据写入权限 | `/api/v1/stock/_*` | 库存调整、库存转移 | | `inbound:read` | 入库单读取权限 | `/api/v1/inbound/_*` | 查询入库单列表、获取入库单详情 | | `inbound:write` | 入库单写入权限 | `/api/v1/inbound/_*` | 创建入库单、更新入库单 | | `outbound:read` | 出库单读取权限 | `/api/v1/outbound/_*` | 查询出库单列表、获取出库单详情 | | `outbound:write` | 出库单写入权限 | `/api/v1/outbound/_*` | 创建出库单、更新出库单 | | `express:read` | 物流渠道读取权限 | `/api/v1/expressChannel/_*` | 查询物流渠道列表 | | `express:write` | 物流渠道写入权限 | `/api/v1/expressChannel/_*` | 创建物流渠道、更新物流渠道 |  ## 错误响应  认证失败时，API将返回以下错误响应：  - **401 Unauthorized**：令牌无效、过期或缺失 - **403 Forbidden**：令牌有效但权限不足 - **429 Too Many Requests**：超过访问频率限制  详细的错误响应格式请参考错误响应部分。 
 *
 * The version of the OpenAPI document: 1.0.3
 * Contact: api-support@jmalltech.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.jmalltech.gwms.sdk.api;

import com.jmalltech.gwms.sdk.invoker.ApiException;
import com.jmalltech.gwms.sdk.model.ApiErrorResponse;
import com.jmalltech.gwms.sdk.model.InboundOrderCreateRequest;
import com.jmalltech.gwms.sdk.model.InboundOrderDetailResponse;
import com.jmalltech.gwms.sdk.model.InboundOrderListResponse;
import com.jmalltech.gwms.sdk.model.InboundOrderResponse;
import com.jmalltech.gwms.sdk.model.InboundOrderStatusEnum;
import com.jmalltech.gwms.sdk.model.InboundOrderStatusUpdateRequest;
import com.jmalltech.gwms.sdk.model.InboundOrderUpdateRequest;
import com.jmalltech.gwms.sdk.model.InboundTypeEnum;
import java.time.LocalDate;
import com.jmalltech.gwms.sdk.model.SortDirection;
import java.util.UUID;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for InboundOrdersApi
 */
@Disabled
public class InboundOrdersApiTest {

    private final InboundOrdersApi api = new InboundOrdersApi();

    /**
     * 通过入库单号取消入库单
     *
     * 通过入库单号取消入库单。只有未收获的入库单才能被取消。  **所需权限：** &#x60;inbound:write&#x60;  **使用场景：** - ERP系统取消已下发的入库单 - 供应商取消预约入库 - 处理异常情况下的入库单撤销 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void cancelInboundOrderByCodeTest() throws ApiException {
        String inboundNo = null;
        api.cancelInboundOrderByCode(inboundNo);
        // TODO: test validations
    }

    /**
     * 创建入库单
     *
     * 在系统中创建一个新的入库单，支持同时创建明细和箱子信息。此操作是幂等的。  **所需权限：** &#x60;inbound:write&#x60;  **使用场景：** - ERP系统推送采购入库单 - 供应商系统创建退货入库单 - 调拨系统创建转库入库单 - 第三方系统集成入库作业 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createInboundOrderTest() throws ApiException {
        UUID idempotencyKey = null;
        InboundOrderCreateRequest inboundOrderCreateRequest = null;
        InboundOrderResponse response = api.createInboundOrder(idempotencyKey, inboundOrderCreateRequest);
        // TODO: test validations
    }

    /**
     * 通过入库单号获取入库单
     *
     * 通过入库单号检索特定入库单的详细信息，包括明细和箱子信息。  **所需权限：** &#x60;inbound:read&#x60;  **使用场景：** - 查询入库单详细状态和进度 - 获取入库明细用于对账 - 追踪特定入库单的处理情况 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getInboundOrderByCodeTest() throws ApiException {
        String inboundNo = null;
        InboundOrderDetailResponse response = api.getInboundOrderByCode(inboundNo);
        // TODO: test validations
    }

    /**
     * 列出入库单
     *
     * 检索入库单的分页列表，支持多种筛选条件和排序。  **所需权限：** &#x60;inbound:read&#x60;  **使用场景：** - ERP系统查询入库单状态 - 供应商门户查看入库进度 - 仓库管理系统监控入库作业 - 财务系统核对入库记录 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listInboundOrdersTest() throws ApiException {
        Integer pageNumber = null;
        Integer pageSize = null;
        String sort = null;
        SortDirection isAsc = null;
        String inboundNo = null;
        InboundTypeEnum inboundType = null;
        InboundOrderStatusEnum status = null;
        String ownerCode = null;
        String warehouseCode = null;
        LocalDate startDate = null;
        LocalDate endDate = null;
        InboundOrderListResponse response = api.listInboundOrders(pageNumber, pageSize, sort, isAsc, inboundNo, inboundType, status, ownerCode, warehouseCode, startDate, endDate);
        // TODO: test validations
    }

    /**
     * 通过入库单号更新入库单
     *
     * 通过入库单号更新入库单信息。  **所需权限：** &#x60;inbound:write&#x60;  **使用场景：** - ERP系统同步入库单变更 - 供应商更新预约入库信息 - 调整入库单明细和数量 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateInboundOrderByCodeTest() throws ApiException {
        String inboundNo = null;
        InboundOrderUpdateRequest inboundOrderUpdateRequest = null;
        InboundOrderResponse response = api.updateInboundOrderByCode(inboundNo, inboundOrderUpdateRequest);
        // TODO: test validations
    }

    /**
     * 更新入库单状态
     *
     * 更新入库单的状态，如审核、开始处理。  **所需权限：** &#x60;inbound:write&#x60;  **使用场景：** - ERP系统审核入库单 - 仓库系统更新作业状态 - 供应商确认入库预约 - 系统集成时同步状态变更 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateInboundOrderStatusTest() throws ApiException {
        String inboundNo = null;
        InboundOrderStatusUpdateRequest inboundOrderStatusUpdateRequest = null;
        InboundOrderResponse response = api.updateInboundOrderStatus(inboundNo, inboundOrderStatusUpdateRequest);
        // TODO: test validations
    }

}
